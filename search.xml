<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>V2Ray服务器安装脚本及K2P路由器配置</title>
      <link href="/2020/03/01/V2Ray%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E5%8F%8AK2P%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/01/V2Ray%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E5%8F%8AK2P%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h2><p>我的VPS使用CentOS8系统，可直接开启BBR：</p><pre><code class="sh">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.confsysctl -p</code></pre><p>使用<strong>Vmess+websocket+TLS+Nginx+Website</strong>的一键安装脚本（适用于：Debian 9+ / Ubuntu 18.04+ / Centos7+）</p><p><code>bash &lt;(curl -L -s https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/master/install_h2.sh) | tee v2ray_ins_h2.log</code></p><p><strong>脚本管理命令</strong></p><p>启动 V2ray：<code>systemctl start v2ray</code></p><p>停止 V2ray：<code>systemctl stop v2ray</code></p><p>启动 Nginx：<code>systemctl start nginx</code></p><p>停止 Nginx：<code>systemctl stop nginx</code></p><p><strong>脚本相关目录</strong></p><p>Web 目录：<code>/home/wwwroot/levis</code></p><p>V2ray 服务端配置：<code>/etc/v2ray/config.json</code></p><p>V2ray 客户端配置：执行安装时所在目录下的 <code>v2ray_info.txt</code></p><p>Nginx 目录：<code>/etc/nginx</code></p><p>证书目录：<code>/data/v2ray.key 和 /data/v2ray.crt</code></p><h2 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h2><p>参考链接：<a href="http://iytc.net/wordpress/?p=4243" target="_blank" rel="noopener">http://iytc.net/wordpress/?p=4243</a></p><pre><code class="js">{  &quot;inbound&quot;: {    &quot;protocol&quot;: &quot;dokodemo-door&quot;,    &quot;port&quot;: 1234,      &quot;settings&quot;: {    &quot;network&quot;: &quot;tcp&quot;,    &quot;timeout&quot;: 30,    &quot;followRedirect&quot;: true    }  },  &quot;outbound&quot;: {    &quot;protocol&quot;: &quot;vmess&quot;,    &quot;settings&quot;: {    &quot;udp&quot;: true,      &quot;vnext&quot;: [{        &quot;address&quot;: &quot;fuckgfw.tk&quot;,         &quot;port&quot;: 443,       &quot;users&quot;: [        {          &quot;id&quot;: &quot;1c1d2c2a-c4b7-47ed-b339-27af5a676dba&quot;,          &quot;alterId&quot;: 64,          &quot;security&quot;: &quot;auto&quot;,          &quot;level&quot;: 0        }          ]      }]    },    &quot;streamSettings&quot;: {      &quot;network&quot;: &quot;ws&quot;,      &quot;security&quot;: &quot;tls&quot;,      &quot;tlsSettings&quot;: {        &quot;serverName&quot;: &quot;fuckgfw.tk&quot;,        &quot;allowInsecure&quot;: true       },      &quot;wsSettings&quot;: {        &quot;connectionReuse&quot;: true,        &quot;path&quot;: &quot;/19890604/&quot;      }    }}}</code></pre><p>下面为一键安装脚本备份</p><pre><code class="sh">#!/bin/bashPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/binexport PATHcd &quot;$(    cd &quot;$(dirname &quot;$0&quot;)&quot; || exit    pwd)&quot; || exit#====================================================#    System Request:Debian 9+/Ubuntu 18.04+/Centos 7+#    Author:    wulabing#    Dscription: V2ray ws+tls onekey Management#    Version: 1.0#    email:admin@wulabing.com#    Official document: www.v2ray.com#====================================================#fonts colorGreen=&quot;\033[32m&quot;Red=&quot;\033[31m&quot;# Yellow=&quot;\033[33m&quot;GreenBG=&quot;\033[42;37m&quot;RedBG=&quot;\033[41;37m&quot;Font=&quot;\033[0m&quot;#notification information# Info=&quot;${Green}[信息]${Font}&quot;OK=&quot;${Green}[OK]${Font}&quot;Error=&quot;${Red}[错误]${Font}&quot;# 版本shell_version=&quot;1.1.3.2&quot;shell_mode=&quot;None&quot;github_branch=&quot;master&quot;version_cmp=&quot;/tmp/version_cmp.tmp&quot;v2ray_conf_dir=&quot;/etc/v2ray&quot;nginx_conf_dir=&quot;/etc/nginx/conf/conf.d&quot;v2ray_conf=&quot;${v2ray_conf_dir}/config.json&quot;nginx_conf=&quot;${nginx_conf_dir}/v2ray.conf&quot;nginx_dir=&quot;/etc/nginx&quot;web_dir=&quot;/home/wwwroot&quot;nginx_openssl_src=&quot;/usr/local/src&quot;v2ray_bin_dir=&quot;/usr/bin/v2ray&quot;v2ray_info_file=&quot;$HOME/v2ray_info.inf&quot;v2ray_qr_config_file=&quot;/usr/local/vmess_qr.json&quot;nginx_systemd_file=&quot;/etc/systemd/system/nginx.service&quot;v2ray_systemd_file=&quot;/etc/systemd/system/v2ray.service&quot;v2ray_access_log=&quot;/var/log/v2ray/access.log&quot;v2ray_error_log=&quot;/var/log/v2ray/error.log&quot;amce_sh_file=&quot;/root/.acme.sh/acme.sh&quot;ssl_update_file=&quot;/usr/bin/ssl_update.sh&quot;nginx_version=&quot;1.16.1&quot;openssl_version=&quot;1.1.1d&quot;jemalloc_version=&quot;5.2.1&quot;old_config_status=&quot;off&quot;# v2ray_plugin_version=&quot;$(wget -qO- &quot;https://github.com/shadowsocks/v2ray-plugin/tags&quot; | grep -E &quot;/shadowsocks/v2ray-plugin/releases/tag/&quot; | head -1 | sed -r &#39;s/.*tag\/v(.+)\&quot;&gt;.*/\1/&#39;)&quot;#移动旧版本配置信息 对小于 1.1.0 版本适配[[ -f &quot;/etc/v2ray/vmess_qr.json&quot; ]] &amp;&amp; mv /etc/v2ray/vmess_qr.json $v2ray_qr_config_file#生成伪装路径camouflage=&quot;/$(head -n 10 /dev/urandom | md5sum | head -c 8)/&quot;source &#39;/etc/os-release&#39;#从VERSION中提取发行版系统的英文名称，为了在debian/ubuntu下添加相对应的Nginx apt源VERSION=$(echo &quot;${VERSION}&quot; | awk -F &quot;[()]&quot; &#39;{print $2}&#39;)check_system() {    if [[ &quot;${ID}&quot; == &quot;centos&quot; &amp;&amp; ${VERSION_ID} -ge 7 ]]; then        echo -e &quot;${OK} ${GreenBG} 当前系统为 Centos ${VERSION_ID} ${VERSION} ${Font}&quot;        INS=&quot;yum&quot;    elif [[ &quot;${ID}&quot; == &quot;debian&quot; &amp;&amp; ${VERSION_ID} -ge 8 ]]; then        echo -e &quot;${OK} ${GreenBG} 当前系统为 Debian ${VERSION_ID} ${VERSION} ${Font}&quot;        INS=&quot;apt&quot;        $INS update        ## 添加 Nginx apt源    elif [[ &quot;${ID}&quot; == &quot;ubuntu&quot; &amp;&amp; $(echo &quot;${VERSION_ID}&quot; | cut -d &#39;.&#39; -f1) -ge 16 ]]; then        echo -e &quot;${OK} ${GreenBG} 当前系统为 Ubuntu ${VERSION_ID} ${UBUNTU_CODENAME} ${Font}&quot;        INS=&quot;apt&quot;        $INS update    else        echo -e &quot;${Error} ${RedBG} 当前系统为 ${ID} ${VERSION_ID} 不在支持的系统列表内，安装中断 ${Font}&quot;        exit 1    fi$INS install dbussystemctl stop firewalld    systemctl disable firewalld    echo -e &quot;${OK} ${GreenBG} firewalld 已关闭 ${Font}&quot;systemctl stop ufw    systemctl disable ufw    echo -e &quot;${OK} ${GreenBG} ufw 已关闭 ${Font}&quot;}is_root() {    if [ 0 == $UID ]; then        echo -e &quot;${OK} ${GreenBG} 当前用户是root用户，进入安装流程 ${Font}&quot;        sleep 3    else        echo -e &quot;${Error} ${RedBG} 当前用户不是root用户，请切换到root用户后重新执行脚本 ${Font}&quot;        exit 1    fi}judge() {    if [[ 0 -eq $? ]]; then        echo -e &quot;${OK} ${GreenBG} $1 完成 ${Font}&quot;        sleep 1    else        echo -e &quot;${Error} ${RedBG} $1 失败${Font}&quot;        exit 1    fi}chrony_install() {    ${INS} -y install chrony    judge &quot;安装 chrony 时间同步服务 &quot;timedatectl set-ntp trueif [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        systemctl enable chronyd &amp;&amp; systemctl restart chronyd    else        systemctl enable chrony &amp;&amp; systemctl restart chrony    fijudge &quot;chronyd 启动 &quot;timedatectl set-timezone Asia/Shanghaiecho -e &quot;${OK} ${GreenBG} 等待时间同步 ${Font}&quot;    sleep 10chronyc sourcestats -v    chronyc tracking -v    date    read -rp &quot;请确认时间是否准确,误差范围±3分钟(Y/N): &quot; chrony_install    [[ -z ${chrony_install} ]] &amp;&amp; chrony_install=&quot;Y&quot;    case $chrony_install in    [yY][eE][sS] | [yY])        echo -e &quot;${GreenBG} 继续安装 ${Font}&quot;        sleep 2        ;;    *)        echo -e &quot;${RedBG} 安装终止 ${Font}&quot;        exit 2        ;;    esac}dependency_install() {    ${INS} install wget git lsof -yif [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        ${INS} -y install crontabs    else        ${INS} -y install cron    fi    judge &quot;安装 crontab&quot;if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        touch /var/spool/cron/root &amp;&amp; chmod 600 /var/spool/cron/root        systemctl start crond &amp;&amp; systemctl enable crond    else        touch /var/spool/cron/crontabs/root &amp;&amp; chmod 600 /var/spool/cron/crontabs/root        systemctl start cron &amp;&amp; systemctl enable cronfi    judge &quot;crontab 自启动配置 &quot;${INS} -y install bc    judge &quot;安装 bc&quot;${INS} -y install unzip    judge &quot;安装 unzip&quot;${INS} -y install qrencode    judge &quot;安装 qrencode&quot;${INS} -y install curl    judge &quot;安装 crul&quot;if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        ${INS} -y groupinstall &quot;Development tools&quot;    else        ${INS} -y install build-essential    fi    judge &quot;编译工具包 安装&quot;if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        ${INS} -y install pcre pcre-devel zlib-devel epel-release    else        ${INS} -y install libpcre3 libpcre3-dev zlib1g-dev dbus    fi#    ${INS} -y install rng-tools    #    judge &quot;rng-tools 安装&quot;${INS} -y install haveged    #    judge &quot;haveged 安装&quot;#    sed -i -r &#39;/^HRNGDEVICE/d;/#HRNGDEVICE=\/dev\/null/a HRNGDEVICE=/dev/urandom&#39; /etc/default/rng-toolsif [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        #       systemctl start rngd &amp;&amp; systemctl enable rngd        #       judge &quot;rng-tools 启动&quot;        systemctl start haveged &amp;&amp; systemctl enable haveged        #       judge &quot;haveged 启动&quot;    else        #       systemctl start rng-tools &amp;&amp; systemctl enable rng-tools        #       judge &quot;rng-tools 启动&quot;        systemctl start haveged &amp;&amp; systemctl enable haveged        #       judge &quot;haveged 启动&quot;    fi}basic_optimization() {    # 最大文件打开数    sed -i &#39;/^\*\ *soft\ *nofile\ *[[:digit:]]*/d&#39; /etc/security/limits.conf    sed -i &#39;/^\*\ *hard\ *nofile\ *[[:digit:]]*/d&#39; /etc/security/limits.conf    echo &#39;* soft nofile 65536&#39; &gt;&gt;/etc/security/limits.conf    echo &#39;* hard nofile 65536&#39; &gt;&gt;/etc/security/limits.conf# 关闭 Selinux    if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        sed -i &#39;s/^SELINUX=.*/SELINUX=disabled/&#39; /etc/selinux/config        setenforce 0    fi}port_alterid_set() {    if [[ &quot;on&quot; != &quot;$old_config_status&quot; ]]; then        read -rp &quot;请输入连接端口（default:443）:&quot; port        [[ -z ${port} ]] &amp;&amp; port=&quot;443&quot;        read -rp &quot;请输入alterID（default:2 仅允许填数字）:&quot; alterID        [[ -z ${alterID} ]] &amp;&amp; alterID=&quot;2&quot;    fi}modify_path() {    if [[ &quot;on&quot; == &quot;$old_config_status&quot; ]]; then        camouflage=&quot;$(grep &#39;\&quot;path\&quot;&#39; $v2ray_qr_config_file | awk -F &#39;&quot;&#39; &#39;{print $4}&#39;)&quot;    fi    sed -i &quot;/\&quot;path\&quot;/c \\\t  \&quot;path\&quot;:\&quot;${camouflage}\&quot;&quot; ${v2ray_conf}    judge &quot;V2ray 伪装路径 修改&quot;}modify_alterid() {    if [[ &quot;on&quot; == &quot;$old_config_status&quot; ]]; then        alterID=&quot;$(grep &#39;\&quot;aid\&quot;&#39; $v2ray_qr_config_file | awk -F &#39;&quot;&#39; &#39;{print $4}&#39;)&quot;    fi    sed -i &quot;/\&quot;alterId\&quot;/c \\\t  \&quot;alterId\&quot;:${alterID}&quot; ${v2ray_conf}    judge &quot;V2ray alterid 修改&quot;    [ -f ${v2ray_qr_config_file} ] &amp;&amp; sed -i &quot;/\&quot;aid\&quot;/c \\  \&quot;aid\&quot;: \&quot;${alterID}\&quot;,&quot; ${v2ray_qr_config_file}    echo -e &quot;${OK} ${GreenBG} alterID:${alterID} ${Font}&quot;}modify_inbound_port() {    if [[ &quot;on&quot; == &quot;$old_config_status&quot; ]]; then        port=&quot;$(info_extraction &#39;\&quot;port\&quot;&#39;)&quot;    fi    if [[ &quot;$shell_mode&quot; != &quot;h2&quot; ]]; then        PORT=$((RANDOM + 10000))        sed -i &quot;/\&quot;port\&quot;/c  \    \&quot;port\&quot;:${PORT},&quot; ${v2ray_conf}    else        sed -i &quot;/\&quot;port\&quot;/c  \    \&quot;port\&quot;:${port},&quot; ${v2ray_conf}    fi    judge &quot;V2ray inbound_port 修改&quot;}modify_UUID() {    [ -z &quot;$UUID&quot; ] &amp;&amp; UUID=$(cat /proc/sys/kernel/random/uuid)    if [[ &quot;on&quot; == &quot;$old_config_status&quot; ]]; then        UUID=&quot;$(info_extraction &#39;\&quot;id\&quot;&#39;)&quot;    fi    sed -i &quot;/\&quot;id\&quot;/c \\\t  \&quot;id\&quot;:\&quot;${UUID}\&quot;,&quot; ${v2ray_conf}    judge &quot;V2ray UUID 修改&quot;    [ -f ${v2ray_qr_config_file} ] &amp;&amp; sed -i &quot;/\&quot;id\&quot;/c \\  \&quot;id\&quot;: \&quot;${UUID}\&quot;,&quot; ${v2ray_qr_config_file}    echo -e &quot;${OK} ${GreenBG} UUID:${UUID} ${Font}&quot;}modify_nginx_port() {    if [[ &quot;on&quot; == &quot;$old_config_status&quot; ]]; then        port=&quot;$(info_extraction &#39;\&quot;port\&quot;&#39;)&quot;    fi    sed -i &quot;/ssl http2;$/c \\\tlisten ${port} ssl http2;&quot; ${nginx_conf}    judge &quot;V2ray port 修改&quot;    [ -f ${v2ray_qr_config_file} ] &amp;&amp; sed -i &quot;/\&quot;port\&quot;/c \\  \&quot;port\&quot;: \&quot;${port}\&quot;,&quot; ${v2ray_qr_config_file}    echo -e &quot;${OK} ${GreenBG} 端口号:${port} ${Font}&quot;}modify_nginx_other() {    sed -i &quot;/server_name/c \\\tserver_name ${domain};&quot; ${nginx_conf}    sed -i &quot;/location/c \\\tlocation ${camouflage}&quot; ${nginx_conf}    sed -i &quot;/proxy_pass/c \\\tproxy_pass http://127.0.0.1:${PORT};&quot; ${nginx_conf}    sed -i &quot;/return/c \\\treturn 301 https://${domain}\$request_uri;&quot; ${nginx_conf}    #sed -i &quot;27i \\\tproxy_intercept_errors on;&quot;  ${nginx_dir}/conf/nginx.conf}web_camouflage() {    ##请注意 这里和LNMP脚本的默认路径冲突，千万不要在安装了LNMP的环境下使用本脚本，否则后果自负    rm -rf /home/wwwroot    mkdir -p /home/wwwroot    cd /home/wwwroot || exit    git clone https://github.com/wulabing/3DCEList.git    judge &quot;web 站点伪装&quot;}v2ray_install() {    if [[ -d /root/v2ray ]]; then        rm -rf /root/v2ray    fi    if [[ -d /etc/v2ray ]]; then        rm -rf /etc/v2ray    fi    mkdir -p /root/v2ray    cd /root/v2ray || exit    wget -N --no-check-certificate https://install.direct/go.sh## wget http://install.direct/go.shif [[ -f go.sh ]]; then        rm -rf $v2ray_systemd_file        systemctl daemon-reload        bash go.sh --force        judge &quot;安装 V2ray&quot;    else        echo -e &quot;${Error} ${RedBG} V2ray 安装文件下载失败，请检查下载地址是否可用 ${Font}&quot;        exit 4    fi    # 清除临时文件    rm -rf /root/v2ray}nginx_exist_check() {    if [[ -f &quot;/etc/nginx/sbin/nginx&quot; ]]; then        echo -e &quot;${OK} ${GreenBG} Nginx已存在，跳过编译安装过程 ${Font}&quot;        sleep 2    elif [[ -d &quot;/usr/local/nginx/&quot; ]]; then        echo -e &quot;${OK} ${GreenBG} 检测到其他套件安装的Nginx，继续安装会造成冲突，请处理后安装${Font}&quot;        exit 1    else        nginx_install    fi}nginx_install() {    #    if [[ -d &quot;/etc/nginx&quot; ]];then    #        rm -rf /etc/nginx    #    fiwget -nc --no-check-certificate http://nginx.org/download/nginx-${nginx_version}.tar.gz -P ${nginx_openssl_src}    judge &quot;Nginx 下载&quot;    wget -nc --no-check-certificate https://www.openssl.org/source/openssl-${openssl_version}.tar.gz -P ${nginx_openssl_src}    judge &quot;openssl 下载&quot;    wget -nc --no-check-certificate https://github.com/jemalloc/jemalloc/releases/download/${jemalloc_version}/jemalloc-${jemalloc_version}.tar.bz2 -P ${nginx_openssl_src}    judge &quot;jemalloc 下载&quot;cd ${nginx_openssl_src} || exit[[ -d nginx-&quot;$nginx_version&quot; ]] &amp;&amp; rm -rf nginx-&quot;$nginx_version&quot;    tar -zxvf nginx-&quot;$nginx_version&quot;.tar.gz[[ -d openssl-&quot;$openssl_version&quot; ]] &amp;&amp; rm -rf openssl-&quot;$openssl_version&quot;    tar -zxvf openssl-&quot;$openssl_version&quot;.tar.gz[[ -d jemalloc-&quot;${jemalloc_version}&quot; ]] &amp;&amp; rm -rf jemalloc-&quot;${jemalloc_version}&quot;    tar -xvf jemalloc-&quot;${jemalloc_version}&quot;.tar.bz2[[ -d &quot;$nginx_dir&quot; ]] &amp;&amp; rm -rf ${nginx_dir}echo -e &quot;${OK} ${GreenBG} 即将开始编译安装 jemalloc ${Font}&quot;    sleep 2cd jemalloc-${jemalloc_version} || exit    ./configure    judge &quot;编译检查&quot;    make &amp;&amp; make install    judge &quot;jemalloc 编译安装&quot;    echo &#39;/usr/local/lib&#39; &gt;/etc/ld.so.conf.d/local.conf    ldconfigecho -e &quot;${OK} ${GreenBG} 即将开始编译安装 Nginx, 过程稍久，请耐心等待 ${Font}&quot;    sleep 4cd ../nginx-${nginx_version} || exit./configure --prefix=&quot;${nginx_dir}&quot; \        --with-http_ssl_module \        --with-http_gzip_static_module \        --with-http_stub_status_module \        --with-pcre \        --with-http_realip_module \        --with-http_flv_module \        --with-http_mp4_module \        --with-http_secure_link_module \        --with-http_v2_module \        --with-cc-opt=&#39;-O3&#39; \        --with-ld-opt=&quot;-ljemalloc&quot; \        --with-openssl=../openssl-&quot;$openssl_version&quot;    judge &quot;编译检查&quot;    make &amp;&amp; make install    judge &quot;Nginx 编译安装&quot;# 修改基本配置    sed -i &#39;s/#user  nobody;/user  root;/&#39; ${nginx_dir}/conf/nginx.conf    sed -i &#39;s/worker_processes  1;/worker_processes  3;/&#39; ${nginx_dir}/conf/nginx.conf    sed -i &#39;s/    worker_connections  1024;/    worker_connections  4096;/&#39; ${nginx_dir}/conf/nginx.conf    sed -i &#39;$i include conf.d/*.conf;&#39; ${nginx_dir}/conf/nginx.conf# 删除临时文件    rm -rf ../nginx-&quot;${nginx_version}&quot;    rm -rf ../openssl-&quot;${openssl_version}&quot;    rm -rf ../nginx-&quot;${nginx_version}&quot;.tar.gz    rm -rf ../openssl-&quot;${openssl_version}&quot;.tar.gz# 添加配置文件夹，适配旧版脚本    mkdir ${nginx_dir}/conf/conf.d}ssl_install() {    if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        ${INS} install socat nc -y    else        ${INS} install socat netcat -y    fi    judge &quot;安装 SSL 证书生成脚本依赖&quot;curl https://get.acme.sh | sh    judge &quot;安装 SSL 证书生成脚本&quot;}domain_check() {    read -rp &quot;请输入你的域名信息(eg:www.wulabing.com):&quot; domain    domain_ip=$(ping &quot;${domain}&quot; -c 1 | sed &#39;1{s/[^(]*(//;s/).*//;q}&#39;)    echo -e &quot;${OK} ${GreenBG} 正在获取 公网ip 信息，请耐心等待 ${Font}&quot;    local_ip=$(curl -4 ip.sb)    echo -e &quot;域名dns解析IP：${domain_ip}&quot;    echo -e &quot;本机IP: ${local_ip}&quot;    sleep 2    if [[ $(echo &quot;${local_ip}&quot; | tr &#39;.&#39; &#39;+&#39; | bc) -eq $(echo &quot;${domain_ip}&quot; | tr &#39;.&#39; &#39;+&#39; | bc) ]]; then        echo -e &quot;${OK} ${GreenBG} 域名dns解析IP 与 本机IP 匹配 ${Font}&quot;        sleep 2    else        echo -e &quot;${Error} ${RedBG} 请确保域名添加了正确的 A 记录，否则将无法正常使用 V2ray ${Font}&quot;        echo -e &quot;${Error} ${RedBG} 域名dns解析IP 与 本机IP 不匹配 是否继续安装？（y/n）${Font}&quot; &amp;&amp; read -r install        case $install in        [yY][eE][sS] | [yY])            echo -e &quot;${GreenBG} 继续安装 ${Font}&quot;            sleep 2            ;;        *)            echo -e &quot;${RedBG} 安装终止 ${Font}&quot;            exit 2            ;;        esac    fi}port_exist_check() {    if [[ 0 -eq $(lsof -i:&quot;$1&quot; | grep -i -c &quot;listen&quot;) ]]; then        echo -e &quot;${OK} ${GreenBG} $1 端口未被占用 ${Font}&quot;        sleep 1    else        echo -e &quot;${Error} ${RedBG} 检测到 $1 端口被占用，以下为 $1 端口占用信息 ${Font}&quot;        lsof -i:&quot;$1&quot;        echo -e &quot;${OK} ${GreenBG} 5s 后将尝试自动 kill 占用进程 ${Font}&quot;        sleep 5        lsof -i:&quot;$1&quot; | awk &#39;{print $2}&#39; | grep -v &quot;PID&quot; | xargs kill -9        echo -e &quot;${OK} ${GreenBG} kill 完成 ${Font}&quot;        sleep 1    fi}acme() {    if &quot;$HOME&quot;/.acme.sh/acme.sh --issue -d &quot;${domain}&quot; --standalone -k ec-256 --force --test; then        echo -e &quot;${OK} ${GreenBG} SSL 证书测试签发成功，开始正式签发 ${Font}&quot;        rm -rf &quot;$HOME/.acme.sh/${domain}_ecc&quot;        sleep 2    else        echo -e &quot;${Error} ${RedBG} SSL 证书测试签发失败 ${Font}&quot;        rm -rf &quot;$HOME/.acme.sh/${domain}_ecc&quot;        exit 1    fiif &quot;$HOME&quot;/.acme.sh/acme.sh --issue -d &quot;${domain}&quot; --standalone -k ec-256 --force; then        echo -e &quot;${OK} ${GreenBG} SSL 证书生成成功 ${Font}&quot;        sleep 2        mkdir /data        if &quot;$HOME&quot;/.acme.sh/acme.sh --installcert -d &quot;${domain}&quot; --fullchainpath /data/v2ray.crt --keypath /data/v2ray.key --ecc --force; then            echo -e &quot;${OK} ${GreenBG} 证书配置成功 ${Font}&quot;            sleep 2        fi    else        echo -e &quot;${Error} ${RedBG} SSL 证书生成失败 ${Font}&quot;        rm -rf &quot;$HOME/.acme.sh/${domain}_ecc&quot;        exit 1    fi}v2ray_conf_add_tls() {    cd /etc/v2ray || exit    wget --no-check-certificate https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/tls/config.json -O config.json    modify_path    modify_alterid    modify_inbound_port    modify_UUID}v2ray_conf_add_h2() {    cd /etc/v2ray || exit    wget --no-check-certificate https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/http2/config.json -O config.json    modify_path    modify_alterid    modify_inbound_port    modify_UUID}old_config_exist_check() {    if [[ -f $v2ray_qr_config_file ]]; then        echo -e &quot;${OK} ${GreenBG} 检测到旧配置文件，是否读取旧文件配置 [Y/N]? ${Font}&quot;        read -r ssl_delete        case $ssl_delete in        [yY][eE][sS] | [yY])            echo -e &quot;${OK} ${GreenBG} 已保留旧配置  ${Font}&quot;            old_config_status=&quot;on&quot;            port=$(info_extraction &#39;\&quot;port\&quot;&#39;)            ;;        *)            rm -rf $v2ray_qr_config_file            echo -e &quot;${OK} ${GreenBG} 已删除旧配置  ${Font}&quot;            ;;        esac    fi}nginx_conf_add() {    touch ${nginx_conf_dir}/v2ray.conf    cat &gt;${nginx_conf_dir}/v2ray.conf &lt;&lt;EOF    server {        listen 443 ssl http2;        ssl_certificate       /data/v2ray.crt;        ssl_certificate_key   /data/v2ray.key;        ssl_protocols         TLSv1.3;        ssl_ciphers           TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;        server_name           serveraddr.com;        index index.html index.htm;        root  /home/wwwroot/3DCEList;        error_page 400 = /400.html;        location /ray/        {        proxy_redirect off;        proxy_pass http://127.0.0.1:10000;        proxy_http_version 1.1;        proxy_set_header X-Real-IP \$remote_addr;        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;        proxy_set_header Upgrade \$http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host \$http_host;        }}    server {        listen 80;        server_name serveraddr.com;        return 301 https://use.shadowsocksr.win\$request_uri;    }EOFmodify_nginx_port    modify_nginx_other    judge &quot;Nginx 配置修改&quot;}start_process_systemd() {    systemctl daemon-reload    if [[ &quot;$shell_mode&quot; != &quot;h2&quot; ]]; then        systemctl restart nginx        judge &quot;Nginx 启动&quot;    fi    systemctl restart v2ray    judge &quot;V2ray 启动&quot;}enable_process_systemd() {    systemctl enable v2ray    judge &quot;设置 v2ray 开机自启&quot;    if [[ &quot;$shell_mode&quot; != &quot;h2&quot; ]]; then        systemctl enable nginx        judge &quot;设置 Nginx 开机自启&quot;    fi}stop_process_systemd() {    if [[ &quot;$shell_mode&quot; != &quot;h2&quot; ]]; then        systemctl stop nginx    fi    systemctl stop v2ray}nginx_process_disabled() {    [ -f $nginx_systemd_file ] &amp;&amp; systemctl stop nginx &amp;&amp; systemctl disable nginx}#debian 系 9 10 适配#rc_local_initialization(){#    if [[ -f /etc/rc.local ]];then#        chmod +x /etc/rc.local#    else#        touch /etc/rc.local &amp;&amp; chmod +x /etc/rc.local#        echo &quot;#!/bin/bash&quot; &gt;&gt; /etc/rc.local#        systemctl start rc-local#    fi##    judge &quot;rc.local 配置&quot;#}acme_cron_update() {    wget -N -P /usr/bin --no-check-certificate &quot;https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/dev/ssl_update.sh&quot;    if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        #        sed -i &quot;/acme.sh/c 0 3 * * 0 \&quot;/root/.acme.sh\&quot;/acme.sh --cron --home \&quot;/root/.acme.sh\&quot; \        #        &amp;&gt; /dev/null&quot; /var/spool/cron/root        sed -i &quot;/acme.sh/c 0 3 * * 0 bash ${ssl_update_file}&quot; /var/spool/cron/root    else        #        sed -i &quot;/acme.sh/c 0 3 * * 0 \&quot;/root/.acme.sh\&quot;/acme.sh --cron --home \&quot;/root/.acme.sh\&quot; \        #        &amp;&gt; /dev/null&quot; /var/spool/cron/crontabs/root        sed -i &quot;/acme.sh/c 0 3 * * 0 bash ${ssl_update_file}&quot; /var/spool/cron/crontabs/root    fi    judge &quot;cron 计划任务更新&quot;}vmess_qr_config_tls_ws() {    cat &gt;$v2ray_qr_config_file &lt;&lt;-EOF{  &quot;v&quot;: &quot;2&quot;,  &quot;ps&quot;: &quot;wulabing_${domain}&quot;,  &quot;add&quot;: &quot;${domain}&quot;,  &quot;port&quot;: &quot;${port}&quot;,  &quot;id&quot;: &quot;${UUID}&quot;,  &quot;aid&quot;: &quot;${alterID}&quot;,  &quot;net&quot;: &quot;ws&quot;,  &quot;type&quot;: &quot;none&quot;,  &quot;host&quot;: &quot;${domain}&quot;,  &quot;path&quot;: &quot;${camouflage}&quot;,  &quot;tls&quot;: &quot;tls&quot;}EOF}vmess_qr_config_h2() {    cat &gt;$v2ray_qr_config_file &lt;&lt;-EOF{  &quot;v&quot;: &quot;2&quot;,  &quot;ps&quot;: &quot;wulabing_${domain}&quot;,  &quot;add&quot;: &quot;${domain}&quot;,  &quot;port&quot;: &quot;${port}&quot;,  &quot;id&quot;: &quot;${UUID}&quot;,  &quot;aid&quot;: &quot;${alterID}&quot;,  &quot;net&quot;: &quot;h2&quot;,  &quot;type&quot;: &quot;none&quot;,  &quot;path&quot;: &quot;${camouflage}&quot;,  &quot;tls&quot;: &quot;tls&quot;}EOF}vmess_qr_link_image() {    vmess_link=&quot;vmess://$(base64 -w 0 $v2ray_qr_config_file)&quot;    {        echo -e &quot;$Red 二维码: $Font&quot;        echo -n &quot;${vmess_link}&quot; | qrencode -o - -t utf8        echo -e &quot;${Red} URL导入链接:${vmess_link} ${Font}&quot;    } &gt;&gt;&quot;${v2ray_info_file}&quot;}info_extraction() {    grep &quot;$1&quot; $v2ray_qr_config_file | awk -F &#39;&quot;&#39; &#39;{print $4}&#39;}basic_information() {    {        echo -e &quot;${OK} ${GreenBG} V2ray+ws+tls 安装成功&quot;        echo -e &quot;${Red} V2ray 配置信息 ${Font}&quot;        echo -e &quot;${Red} 地址（address）:${Font} $(info_extraction &#39;\&quot;add\&quot;&#39;) &quot;        echo -e &quot;${Red} 端口（port）：${Font} $(info_extraction &#39;\&quot;port\&quot;&#39;) &quot;        echo -e &quot;${Red} 用户id（UUID）：${Font} $(info_extraction &#39;\&quot;id\&quot;&#39;)&quot;        echo -e &quot;${Red} 额外id（alterId）：${Font} $(info_extraction &#39;\&quot;aid\&quot;&#39;)&quot;        echo -e &quot;${Red} 加密方式（security）：${Font} 自适应 &quot;        echo -e &quot;${Red} 传输协议（network）：${Font} $(info_extraction &#39;\&quot;net\&quot;&#39;) &quot;        echo -e &quot;${Red} 伪装类型（type）：${Font} none &quot;        echo -e &quot;${Red} 路径（不要落下/）：${Font} $(info_extraction &#39;\&quot;path\&quot;&#39;) &quot;        echo -e &quot;${Red} 底层传输安全：${Font} tls &quot;    } &gt;&quot;${v2ray_info_file}&quot;}show_information() {    cat &quot;${v2ray_info_file}&quot;}ssl_judge_and_install() {    if [[ -f &quot;/data/v2ray.key&quot; || -f &quot;/data/v2ray.crt&quot; ]]; then        echo &quot;/data 目录下证书文件已存在&quot;        echo -e &quot;${OK} ${GreenBG} 是否删除 [Y/N]? ${Font}&quot;        read -r ssl_delete        case $ssl_delete in        [yY][eE][sS] | [yY])            rm -rf /data/*            echo -e &quot;${OK} ${GreenBG} 已删除 ${Font}&quot;            ;;        *) ;;esac    fiif [[ -f &quot;/data/v2ray.key&quot; || -f &quot;/data/v2ray.crt&quot; ]]; then        echo &quot;证书文件已存在&quot;    elif [[ -f &quot;$HOME/.acme.sh/${domain}_ecc/${domain}.key&quot; &amp;&amp; -f &quot;$HOME/.acme.sh/${domain}_ecc/${domain}.cer&quot; ]]; then        echo &quot;证书文件已存在&quot;        &quot;$HOME&quot;/.acme.sh/acme.sh --installcert -d &quot;${domain}&quot; --fullchainpath /data/v2ray.crt --keypath /data/v2ray.key --ecc        judge &quot;证书应用&quot;    else        ssl_install        acme    fi}nginx_systemd() {    cat &gt;$nginx_systemd_file &lt;&lt;EOF[Unit]Description=The NGINX HTTP and reverse proxy serverAfter=syslog.target network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/etc/nginx/logs/nginx.pidExecStartPre=/etc/nginx/sbin/nginx -tExecStart=/etc/nginx/sbin/nginx -c ${nginx_dir}/conf/nginx.confExecReload=/etc/nginx/sbin/nginx -s reloadExecStop=/bin/kill -s QUIT \$MAINPIDPrivateTmp=true[Install]WantedBy=multi-user.targetEOFjudge &quot;Nginx systemd ServerFile 添加&quot;    systemctl daemon-reload}tls_type() {    if [[ -f &quot;/etc/nginx/sbin/nginx&quot; ]] &amp;&amp; [[ -f &quot;$nginx_conf&quot; ]] &amp;&amp; [[ &quot;$shell_mode&quot; == &quot;ws&quot; ]]; then        echo &quot;请选择支持的 TLS 版本（default:3）:&quot;        echo &quot;请注意,如果你使用 Quantaumlt X / 路由器 / 旧版 Shadowrocket / 低于 4.18.1 版本的 V2ray core 请选择 兼容模式&quot;        echo &quot;1: TLS1.1 TLS1.2 and TLS1.3（兼容模式）&quot;        echo &quot;2: TLS1.2 and TLS1.3 (兼容模式)&quot;        echo &quot;3: TLS1.3 only&quot;        read -rp &quot;请输入：&quot; tls_version        [[ -z ${tls_version} ]] &amp;&amp; tls_version=3        if [[ $tls_version == 3 ]]; then            sed -i &#39;s/ssl_protocols.*/ssl_protocols         TLSv1.3;/&#39; $nginx_conf            echo -e &quot;${OK} ${GreenBG} 已切换至 TLS1.3 only ${Font}&quot;        elif [[ $tls_version == 1 ]]; then            sed -i &#39;s/ssl_protocols.*/ssl_protocols         TLSv1.1 TLSv1.2 TLSv1.3;/&#39; $nginx_conf            echo -e &quot;${OK} ${GreenBG} 已切换至 TLS1.1 TLS1.2 and TLS1.3 ${Font}&quot;        else            sed -i &#39;s/ssl_protocols.*/ssl_protocols         TLSv1.2 TLSv1.3;/&#39; $nginx_conf            echo -e &quot;${OK} ${GreenBG} 已切换至 TLS1.2 and TLS1.3 ${Font}&quot;        fi        systemctl restart nginx        judge &quot;Nginx 重启&quot;    else        echo -e &quot;${Error} ${RedBG} Nginx 或 配置文件不存在 或当前安装版本为 h2 ，请正确安装脚本后执行${Font}&quot;    fi}show_access_log() {    [ -f ${v2ray_access_log} ] &amp;&amp; tail -f ${v2ray_access_log} || echo -e &quot;${RedBG}log文件不存在${Font}&quot;}show_error_log() {    [ -f ${v2ray_error_log} ] &amp;&amp; tail -f ${v2ray_error_log} || echo -e &quot;${RedBG}log文件不存在${Font}&quot;}ssl_update_manuel() {    [ -f ${amce_sh_file} ] &amp;&amp; &quot;/root/.acme.sh&quot;/acme.sh --cron --home &quot;/root/.acme.sh&quot; || echo -e &quot;${RedBG}证书签发工具不存在，请确认你是否使用了自己的证书${Font}&quot;    domain=&quot;$(info_extraction &#39;\&quot;add\&quot;&#39;)&quot;    &quot;$HOME&quot;/.acme.sh/acme.sh --installcert -d &quot;${domain}&quot; --fullchainpath /data/v2ray.crt --keypath /data/v2ray.key --ecc}bbr_boost_sh() {    [ -f &quot;tcp.sh&quot; ] &amp;&amp; rm -rf ./tcp.sh    wget -N --no-check-certificate &quot;https://github.com/ylx2016/Linux-NetSpeed/releases/download/sh/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh}mtproxy_sh() {    [ -f &quot;mtproxy_go.sh&quot; ] &amp;&amp; rm -rf ./mtproxy_go.sh    wget -N --no-check-certificate https://github.com/whunt1/onekeymakemtg/raw/master/mtproxy_go.sh &amp;&amp; chmod +x mtproxy_go.sh &amp;&amp; ./mtproxy_go.sh}uninstall_all() {    stop_process_systemd    [[ -f $nginx_systemd_file ]] &amp;&amp; rm -f $nginx_systemd_file    [[ -f $v2ray_systemd_file ]] &amp;&amp; rm -f $v2ray_systemd_file    [[ -d $v2ray_bin_dir ]] &amp;&amp; rm -rf $v2ray_bin_dir    if [[ -d $nginx_dir ]]; then        echo -e &quot;${OK} ${Green} 是否卸载 Nginx [Y/N]? ${Font}&quot;        read -r uninstall_nginx        case $uninstall_nginx in        [yY][eE][sS] | [yY])            rm -rf $nginx_dir            echo -e &quot;${OK} ${Green} 已卸载 Nginx ${Font}&quot;            ;;        *) ;;esac    fi    [[ -d $v2ray_conf_dir ]] &amp;&amp; rm -rf $v2ray_conf_dir    [[ -d $web_dir ]] &amp;&amp; rm -rf $web_dir    systemctl daemon-reload    echo -e &quot;${OK} ${GreenBG} 已卸载，SSL证书文件已保留 ${Font}&quot;}delete_tls_key_and_crt() {    [[ -f $HOME/.acme.sh/acme.sh ]] &amp;&amp; /root/.acme.sh/acme.sh uninstall &gt;/dev/null 2&gt;&amp;1    [[ -d $HOME/.acme.sh ]] &amp;&amp; rm -rf &quot;$HOME/.acme.sh&quot;    echo -e &quot;${OK} ${GreenBG} 已清空证书遗留文件 ${Font}&quot;}judge_mode() {    if [ -f $v2ray_bin_dir/v2ray ]; then        if grep -q &quot;ws&quot; $v2ray_qr_config_file; then            shell_mode=&quot;ws&quot;        elif grep -q &quot;h2&quot; $v2ray_qr_config_file; then            shell_mode=&quot;h2&quot;        fi    fi}install_v2ray_ws_tls() {    is_root    check_system    chrony_install    dependency_install    basic_optimization    domain_check    old_config_exist_check    port_alterid_set    v2ray_install    port_exist_check 80    port_exist_check &quot;${port}&quot;    nginx_exist_check    v2ray_conf_add_tls    nginx_conf_add    web_camouflage    ssl_judge_and_install    nginx_systemd    vmess_qr_config_tls_ws    basic_information    vmess_qr_link_image    tls_type    show_information    start_process_systemd    enable_process_systemd    acme_cron_update}install_v2_h2() {    is_root    check_system    chrony_install    dependency_install    basic_optimization    domain_check    old_config_exist_check    port_alterid_set    v2ray_install    port_exist_check 80    port_exist_check &quot;${port}&quot;    v2ray_conf_add_h2    ssl_judge_and_install    vmess_qr_config_h2    basic_information    vmess_qr_link_image    show_information    start_process_systemd    enable_process_systemd}update_sh() {    ol_version=$(curl -L -s https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/install.sh | grep &quot;shell_version=&quot; | head -1 | awk -F &#39;=|&quot;&#39; &#39;{print $3}&#39;)    echo &quot;$ol_version&quot; &gt;$version_cmp    echo &quot;$shell_version&quot; &gt;&gt;$version_cmp    if [[ &quot;$shell_version&quot; &lt; &quot;$(sort -rV $version_cmp | head -1)&quot; ]]; then        echo -e &quot;${OK} ${GreenBG} 存在新版本，是否更新 [Y/N]? ${Font}&quot;        read -r update_confirm        case $update_confirm in        [yY][eE][sS] | [yY])            wget -N --no-check-certificate https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/install.sh            echo -e &quot;${OK} ${GreenBG} 更新完成 ${Font}&quot;            exit 0            ;;        *) ;;esac    else        echo -e &quot;${OK} ${GreenBG} 当前版本为最新版本 ${Font}&quot;    fi}maintain() {    echo -e &quot;${RedBG}该选项暂时无法使用${Font}&quot;    echo -e &quot;${RedBG}$1${Font}&quot;    exit 0}list() {    case $1 in    tls_modify)        tls_type        ;;    uninstall)        uninstall_all        ;;    crontab_modify)        acme_cron_update        ;;    boost)        bbr_boost_sh        ;;    *)        menu        ;;    esac}menu() {    update_sh    echo -e &quot;\t V2ray 安装管理脚本 ${Red}[${shell_version}]${Font}&quot;    echo -e &quot;\t---authored by wulabing---&quot;    echo -e &quot;\thttps://github.com/wulabing\n&quot;    echo -e &quot;当前已安装版本:${shell_mode}\n&quot;echo -e &quot;—————————————— 安装向导 ——————————————&quot;&quot;&quot;    echo -e &quot;${Green}0.${Font}  升级 脚本&quot;    echo -e &quot;${Green}1.${Font}  安装 V2Ray (Nginx+ws+tls)&quot;    echo -e &quot;${Green}2.${Font}  安装 V2Ray (http/2)&quot;    echo -e &quot;${Green}3.${Font}  升级 V2Ray core&quot;    echo -e &quot;—————————————— 配置变更 ——————————————&quot;    echo -e &quot;${Green}4.${Font}  变更 UUID&quot;    echo -e &quot;${Green}5.${Font}  变更 alterid&quot;    echo -e &quot;${Green}6.${Font}  变更 port&quot;    echo -e &quot;${Green}7.${Font}  变更 TLS 版本(仅ws+tls有效)&quot;    echo -e &quot;—————————————— 查看信息 ——————————————&quot;    echo -e &quot;${Green}8.${Font}  查看 实时访问日志&quot;    echo -e &quot;${Green}9.${Font}  查看 实时错误日志&quot;    echo -e &quot;${Green}10.${Font} 查看 V2Ray 配置信息&quot;    echo -e &quot;—————————————— 其他选项 ——————————————&quot;    echo -e &quot;${Green}11.${Font} 安装 4合1 bbr 锐速安装脚本&quot;    echo -e &quot;${Green}12.${Font} 安装 MTproxy(支持TLS混淆)&quot;    echo -e &quot;${Green}13.${Font} 证书 有效期更新&quot;    echo -e &quot;${Green}14.${Font} 卸载 V2Ray&quot;    echo -e &quot;${Green}15.${Font} 更新 证书crontab计划任务&quot;    echo -e &quot;${Green}16.${Font} 清空 证书遗留文件&quot;    echo -e &quot;${Green}17.${Font} 退出 \n&quot;read -rp &quot;请输入数字：&quot; menu_num    case $menu_num in    0)        update_sh        ;;    1)        shell_mode=&quot;ws&quot;        install_v2ray_ws_tls        ;;    2)        shell_mode=&quot;h2&quot;        install_v2_h2        ;;    3)        bash &lt;(curl -L -s https://install.direct/go.sh)        ;;    4)        read -rp &quot;请输入UUID:&quot; UUID        modify_UUID        start_process_systemd        ;;    5)        read -rp &quot;请输入alterID:&quot; alterID        modify_alterid        start_process_systemd        ;;    6)        read -rp &quot;请输入连接端口:&quot; port        if grep -q &quot;ws&quot; $v2ray_qr_config_file; then            modify_nginx_port        elif grep -q &quot;h2&quot; $v2ray_qr_config_file; then            modify_inbound_port        fi        start_process_systemd        ;;    7)        tls_type        ;;    8)        show_access_log        ;;    9)        show_error_log        ;;    10)        basic_information        vmess_qr_link_image        show_information        ;;    11)        bbr_boost_sh        ;;    12)        mtproxy_sh        ;;    13)        stop_process_systemd        ssl_update_manuel        start_process_systemd        ;;    14)        uninstall_all        ;;    15)        acme_cron_update        ;;    16)        delete_tls_key_and_crt        ;;    17)        exit 0        ;;    *)        echo -e &quot;${RedBG}请输入正确的数字${Font}&quot;        ;;    esac}judge_modelist &quot;$1&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 越过长城，走向世界 </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将博客从Windows转移至MacOS</title>
      <link href="/2019/11/17/%E5%B0%86%E5%8D%9A%E5%AE%A2%E4%BB%8EWindows%E8%BD%AC%E7%A7%BB%E8%87%B3MacOS/"/>
      <url>/2019/11/17/%E5%B0%86%E5%8D%9A%E5%AE%A2%E4%BB%8EWindows%E8%BD%AC%E7%A7%BB%E8%87%B3MacOS/</url>
      
        <content type="html"><![CDATA[<p>由于本人刚接触MacOS,系统使用习惯依然是Windows的那一套，还没改过来。安装Git和Node.js时没看Hexo的文档直接从官网下载安装包安装，过程也很顺利，跟Windows一样直接点下一步就安装完成了。结果到安装Hexo时，我在终端输入<code>$ npm install -g hexo-cli</code> 之后就报错：</p><pre><code class="shell">npm WARN checkPermissions Missing write access to /usr/local/lib/node_modules npm ERR! code EACCES npm ERR! syscall access npm ERR! path /usr/local/lib/node_modules npm ERR! errno -13 npm ERR! Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules&#39; npm ERR! [Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules&#39;] { npm ERR! stack: &quot;Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules&#39;&quot;, npm ERR! errno: -13, npm ERR! code: &#39;EACCES&#39;, npm ERR! syscall: &#39;access&#39;, npm ERR! path: &#39;/usr/local/lib/node_modules&#39; npm ERR! } npm ERR! npm ERR! The operation was rejected by your operating system. npm ERR! It is likely you do not have the permissions to access this file as the current user npm ERR! npm ERR! If you believe this might be a permissions issue, please double-check the npm ERR! permissions of the file and its containing directories, or try running npm ERR! the command again as root/Administrator. npm ERR! A complete log of this run can be found in: npm ERR!  /Users/xxxx/.npm/_logs/2019-11-16T04_23_38_680Z-debug.log </code></pre><p>查看Hexo的文档才知道是<code>EACCES</code>权限错误的问题，用Homebrew等包管理工具安装就不会出现这种问题，不过文档也提供了解决方法：<a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener">npmjs发布的指导</a>。指导提供了两种解决方法： </p><ul><li>使用节点版本管理器重新安装npm（推荐）</li><li>手动更改npm的默认目录<br>我选择了第二种，文档翻译如下： </li></ul><p><em>为了最大程度地减少权限错误的可能性，您可以将npm配置为使用其他目录。 在此示例中，您将在主目录中创建并使用隐藏目录。</em></p><ol><li>备份您的电脑</li><li>在命令行的主目录中，为全局安装创建目录： <code>mkdir ~/.npm-global</code> </li><li>配置npm以使用新的目录路径： <code>npm config set prefix &#39;~/.npm-global&#39;</code></li><li>在您喜欢的文本编辑器中，打开或创建<strong><em>~/.profile</em></strong>文件并添加以下行： <code>export PATH=~/.npm-global/bin:$PATH</code></li><li>在命令行上，更新系统变量：<code>source ~/.profile</code></li></ol><p>设置过后便可正常安装Hexo。<br>为了省事儿，我直接将原Windows系统博客目录下的配置文件 <code>_config.yml</code> 和主题文件夹material拷贝过来，由于本博客的外观主题 <code>Material</code> 的官方文档已经无法访问，凭记忆添加插件的时候少安装了一个插件，导致生成文章时再次报错，根据报错找到了忘记安装的 <code>hexo-helper-qrcode</code> 插件，之后便可以正常生成页面，最后添加新的ssh keys到GitHub， <code>hexo generate --deploy</code> 博客顺利完成转移。</p><p>因本博客主题作者已不再维护主题的文档，为了备忘记录一下使用到的配置：<br>Hexo插件： <code>hexo-deployer-git</code>（一键部署插件），<code>hexo-generator-feed</code>（生成feed插件），<code>hexo-generator-search</code>（本地搜索插件），<code>hexo-helper-qrcode</code>（生成文章页二维码）<br>MaterialCDN：使用又拍云存储图片和主题的静态文件。</p><p>补充：Xcode自带Git，应用商店直接安装即可，Node还是用包管理工具<a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a>安装省事儿。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精神有些低沉</title>
      <link href="/2018/10/13/%E7%B2%BE%E7%A5%9E%E6%9C%89%E4%BA%9B%E4%BD%8E%E6%B2%89/"/>
      <url>/2018/10/13/%E7%B2%BE%E7%A5%9E%E6%9C%89%E4%BA%9B%E4%BD%8E%E6%B2%89/</url>
      
        <content type="html"><![CDATA[<pre><code>在最深的绝望里，遇见最美丽的风景。    ——几米</code></pre><a id="more"></a><p>年休七天假，因為懶(qióng)癌發作哪也沒去，在家躺尸。方才樓下有一人持桿打棗，擾醒了我的白日夢，無奈我只是這裡的租戶，也不敢對其叫罵。白日夢被擾醒，坐起發了一會兒呆，自言自語道：該想想接下來的路該怎麼走了。<br>個人博客建立以後數次遷移把本就很少的博文都弄丟了，此後停更至今一年多了，微信公眾號也停更快一年了，說工作生活忙不過來無暇顧及肯定是假話，是那份初心被我丟棄了吧。越想輸出越認識到自己的無知和渺小，進而自卑，越對自我期許與看重，心情越黯淡。<br>今年我曾經的一位朋友在兩年未聯絡過我的情況下突然發訊息來說想見見我，一個月后我的這位朋友騙過所有人去了隔海的國度，說是去旅行，最後一天卻在異國跳樓自殺，我愕然，我不知如何面對。十天后我久病的爺爺在老家趁家中無他人時服農藥自殺，我默然。出殯時作為長孫我捧著爺爺的遺像，在大雨中深一腳淺一腳走在泥濘的山路上，我不得不面對我越來越害怕的現實了。<br>我時常想該對自己認真一點了，好不容易來一趟這珍貴的人世，不能枉過這悠長的一生。得過且過的日子我自己都受不了了。自我成長停滯的這兩年我身心都已倦怠，我必須讓自己再次成長，我知道會更加艱辛，我知道成長的路就是失去的路，但成長會有一段這樣艱辛的路要走，這是一條必經的路，它是泥濘的，在經過的時候，一隻脚踩下去，另一隻脚需要從泥濘中用力，用力，才能繼續走下一步……<br>碼了許多廢話，歸根結底：我要奮力前行了。</p>]]></content>
      
      
      <categories>
          
          <category> 無題 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎唸 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
