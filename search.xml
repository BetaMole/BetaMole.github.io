<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《如何阅读一本书》读书笔记</title>
      <link href="/2020/04/21/%E3%80%8A%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/21/%E3%80%8A%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<pre><code>读者对他自己，以及自己面前的书籍，要求的越多，获得的就越多。</code></pre><a id="more"></a><h3 id="阅读的四个层次"><a href="#阅读的四个层次" class="headerlink" title="阅读的四个层次"></a>阅读的四个层次</h3><p>基础阅读、检视阅读、分析阅读和主题阅读。</p><h3 id="关于一本书，你一定要提出四个主要的问题："><a href="#关于一本书，你一定要提出四个主要的问题：" class="headerlink" title="关于一本书，你一定要提出四个主要的问题："></a>关于一本书，你一定要提出四个主要的问题：</h3><p>（1）整体来说，这本书到底在谈些什么？你一定要想办法找出这本书的主题，作者如何依次发展这个主题，如何逐步从核心主题分解出从属的关键议题来。<br>（2）作者细部说了什么，怎么说的？你一定要想办法找出主要的想法、声明与论点。这些组合成作者想要传达的特殊讯息。<br>（3）这本书说得有道理吗？是全部有道理，还是部分有道理？除非你能回答前两个问题，否则你没法回答这个问题。在你判断这本书是否有道理之前，你必须先了解整本书在说些什么才行。然而，等你了解了一本书，如果你又读得很认真的话，你会觉得有责任为这本书做个自己的判断。光是知道作者的想法是不够的。<br>（4）这本书跟你有什么关系？如果这本书给了你一些资讯，你一定要问问这些资讯有什么意义。为什么这位作者会认为知道这件事很重要？你真的有必要去了解吗？如果这本书不只提供了资讯，还启发了你，就更有必要找出其他相关的、更深的含意或建议，以获得更多的启示。</p><h3 id="做笔记方式："><a href="#做笔记方式：" class="headerlink" title="做笔记方式："></a>做笔记方式：</h3><p>（1）画底线——在主要的重点，或重要又有力量的句子下画线。<br>（2）在画底线处的栏外再加画一道线——把你已经画线的部分再强调一遍，或是某一段很重要，但要画底线太长了，便在这一整段外加上一个记号。<br>（3）在空白处做星号或其他符号——要慎用，只用来强调书中十来个最重要的声明或段落即可。你可能想要将做过这样记号的地方每页折一个角，或是夹一张书签。这样你随时从书架上拿起这本书，打开你做记号的地方，就能唤醒你的记忆。<br>（4）在空白处编号——作者的某个论点发展出一连串的重要陈述时，可以做顺序编号。<br>（5）在空白处记下其他的页码——强调作者在书中其他部分也有过同样的论点，或相关的要点，或是与此处观点不同的地方。这样做能让散布全书的想法统一集中起来。许多读者会用Cf这样的记号，表示比较或参照的意思。<br>（6）将关键字或句子圈出来——这跟画底线是同样的功能。<br>（7）在书页的空白处做笔记——在阅读某一章节时，你可能会有些问题（或答案），在空白处记下来，这样可以帮你回想起你的问题或答案。你也可以将复杂的论点简化说明在书页的空白处。或是记下全书所有主要论点的发展顺序。书中最后一页可以用来作为个人的索引页，将作者的主要观点依序记下来。<br>（8）试着将全书的整体架构写出来，列出基本的大纲与前后篇章秩序。</p><h3 id="检视阅读："><a href="#检视阅读：" class="headerlink" title="检视阅读："></a>检视阅读：</h3><p>在检视阅读中，要回答的问题是：<br>第一，这是什么样的一本书？<br>第二，整本书在谈的是什么？<br>第三，作者是借着怎样的整体架构，来发展他的观点或陈述他对这个主题的理解？</p><h4 id="略读的建议："><a href="#略读的建议：" class="headerlink" title="略读的建议："></a>略读的建议：</h4><p>（1）先看书名页，然后如果有序就先看序。<br>（2）研究目录页，对这本书的基本架构做概括性的理解。<br>（3）如果书中附有索引，也要检阅一下——快速评估这本书涵盖了哪些议题的范围。<br>（4）不妨读一下出版者的介绍。<br>（5）从你对一本书的目录很概略，甚至有点模糊的印象当中，开始挑几个看来跟主题息息相关的篇章来看。<br>（6）最后一步，把书打开来，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多。就用这样的方法把全书翻过一遍，随时寻找主要论点的讯号，留意主题的基本脉动。</p><h3 id="分析阅读："><a href="#分析阅读：" class="headerlink" title="分析阅读："></a>分析阅读：</h3><h4 id="一、分析阅读的第一阶段：找出一本书在谈些什么的规则"><a href="#一、分析阅读的第一阶段：找出一本书在谈些什么的规则" class="headerlink" title="一、分析阅读的第一阶段：找出一本书在谈些什么的规则"></a>一、分析阅读的第一阶段：找出一本书在谈些什么的规则</h4><p>（1）依照书的种类与主题来分类。<br>（2）使用最简短的文字说明整本书在谈些什么。<br>（3）将主要部分按顺序与关联性列举出来。将全书的大纲列举出来，并将各个部分的大纲也列出来。<br>（4）确定作者想要解决的问题。</p><h4 id="二、分析阅读的第二阶段：诠释一本书的内容规则"><a href="#二、分析阅读的第二阶段：诠释一本书的内容规则" class="headerlink" title="二、分析阅读的第二阶段：诠释一本书的内容规则"></a>二、分析阅读的第二阶段：诠释一本书的内容规则</h4><p>（5）诠释作者的关键字，与他达成共识。<br>（6）由最重要的句子中，抓住作者的重要主旨。<br>（7）知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来。<br>（8）确定作者已经解决了哪些问题，还有哪些是没解决的。再判断哪些是作者知道他没解决的问题。</p><h4 id="三、分析阅读的第三阶段：像是沟通知识一样地评论一本书的规则"><a href="#三、分析阅读的第三阶段：像是沟通知识一样地评论一本书的规则" class="headerlink" title="三、分析阅读的第三阶段：像是沟通知识一样地评论一本书的规则"></a>三、分析阅读的第三阶段：像是沟通知识一样地评论一本书的规则</h4><p>（9）除非你已经完成大纲架构，也能诠释整本书了，否则不要轻易批评。<br>（10）不要争强好胜，非辩到底不可。<br>（11）在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同。<br>（12）证明作者的知识不足。<br>（13）证明作者的知识错误。<br>（14）证明作者不合逻辑。<br>（15）证明作者的分析与理由是不完整的。</p><h3 id="主题阅读："><a href="#主题阅读：" class="headerlink" title="主题阅读："></a>主题阅读：</h3><p>主题阅读步骤一：找到相关的章节<br>主题阅读步骤二：带引作者与你达成共识。<br>主题阅读步骤三：厘清问题。<br>主题阅读步骤四：界定议题。<br>主题阅读步骤五：分析讨论。</p><h4 id="一、观察研究范围：主题阅读的准备阶段"><a href="#一、观察研究范围：主题阅读的准备阶段" class="headerlink" title="一、观察研究范围：主题阅读的准备阶段"></a>一、观察研究范围：主题阅读的准备阶段</h4><p>（1）针对你要研究的主题，设计一份试验性的书目。你可以参考图书馆目录、专家的建议与书中的书目索引。<br>（2）浏览这份书目上所有的书，确定哪些与你的主题相关，并就你的主题建立起清楚的概念。</p><h4 id="二、主题阅读：阅读所有第一阶段收集到的书籍"><a href="#二、主题阅读：阅读所有第一阶段收集到的书籍" class="headerlink" title="二、主题阅读：阅读所有第一阶段收集到的书籍"></a>二、主题阅读：阅读所有第一阶段收集到的书籍</h4><p>（1）浏览所有在第一阶段被认定与你主题相关的书，找出最相关的章节。<br>（2）根据主题创造出一套中立的词汇，带引作者与你达成共识——无论作者是否实际用到这些词汇，所有的作者，或至少绝大部分的作者都可以用这套词汇来诠释。<br>（3）建立一个中立的主旨，列出一连串的问题——无论作者是否明白谈过这些问题，所有的作者，或者至少大多数的作者都要能解读为针对这些问题提供了他们的回答。<br>（4）界定主要及次要的议题。然后将作者针对各个问题的不同意见整理陈列在各个议题之旁。你要记住，各个作者之间或之中，不见得一定存在着某个议题。有时候，你需要针对一些不是作者主要关心范围的事情，把他的观点解读，才能建构出这种议题。<br>（5）分析这些讨论。这得把问题和议题按顺序排列，以求突显主题。比较有共通性的议题，要放在比较没有共通性的议题之前。各个议题之间的关系也要清楚地界定出来。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年度計劃</title>
      <link href="/2020/04/04/2020%E5%B9%B4%E5%BA%A6%E8%A8%88%E5%8A%83/"/>
      <url>/2020/04/04/2020%E5%B9%B4%E5%BA%A6%E8%A8%88%E5%8A%83/</url>
      
        <content type="html"><![CDATA[<p>2020年第一個季度已經過完，為什麼現在才來寫年度計劃呢？第一個季度全然荒廢了，既有COVID-19疫情的原因，也有內心沒有做好準備的原因。我已於2月18日提交了辭職報告，但辭職手續至今還未完成。昨晚看了堅果雲公眾號推送了一篇雞湯，裡面的一句話我很受用：“有些事不是看到了希望才去堅持，而是堅持才會看到希望。”我既然已經有了大方向的目標，就要每天朝這個目標邁進才對。所以現在來好好梳理一下我想做的事，然後去一件件完成。</p><h5 id="辭職"><a href="#辭職" class="headerlink" title="辭職"></a>辭職</h5><p>這件事應該算已經完成了，只是後面一系列的手續流程不知道還要耽誤多久。辭職的原因是受不了面對無腦人群和聽到這個城市的方言，最重要的是，我有自己想要做的事情了——成為一名動畫師。</p><h5 id="搬家"><a href="#搬家" class="headerlink" title="搬家"></a>搬家</h5><p>女朋友決定和我一起生活，我覺得很幸福，兩個人和一隻貓一起住需要大一些的空間。我不喜歡這座城市的人和他們說的方言，所以需要住在一個平時看不到人和聽不見方言的地方。地方已經選好了，這個月上旬應該就能搬完家且佈置妥當。</p><h5 id="繪畫"><a href="#繪畫" class="headerlink" title="繪畫"></a>繪畫</h5><p>自學繪畫是一條艱辛的路，還是需要他人教導才能更快發現問題更快取得進步。目前糾結是報Krenz的網絡班還找線下畫室學習，準備將收藏的一些網絡公開課學習完以後報一期K大的透視課學習一下看看成效再作決定。這之前，“不教一日閒過也。”</p><h5 id="寫作"><a href="#寫作" class="headerlink" title="寫作"></a>寫作</h5><p>應該說是“記錄”，不要求寫得多好，先留下痕跡。記錄好當前自己所能夠想到的，包括生活、工作、學習等方面的所思所想，後續再慢慢迭代。我在各種平台上收藏了很多文章都未閱讀整理，理解並記錄筆記將是今年學習的大頭，不管是視頻形式還是文章形式的知識，最終都要經過頭腦整理成筆記，提一句，英語學習一天都不能停，動手動口動腦子。</p><h5 id="閱讀"><a href="#閱讀" class="headerlink" title="閱讀"></a>閱讀</h5><p>別人是著作等身，而我是想讀的書比我人還高。 2020年還剩九個月，書單裡先列9本需要細讀的實體書，然後選18本電子書閱讀。</p><p>《素描的訣竅》《鉛筆素描的樂趣》《Procreate繪畫創作從入門到精通》《理解漫畫》《荒木飛呂彥的漫畫術》《原動畫基礎教程》《電影鏡頭入門》《樹莓派開始玩轉Linux》《新手學Excel2007公式·函數與圖表》</p><p>《動畫製作基礎》《伯里曼人體結構繪畫教學》《Adobe PS教程》《思維導圖》《英語入門王》《動畫速寫》《動畫師之路》《番茄工作法》《人體動態100例》 《風之谷》《新世紀福音戰士》《三體》《1368個單詞就夠了》《30天學會繪畫》《AE完全自學教程》《人物速寫基礎教程》《結構素描實例教程》《拿筆就畫！人物速寫108例》</p><h5 id="軟件"><a href="#軟件" class="headerlink" title="軟件"></a>軟件</h5><p>生產力軟件買了不少，然而都沒變成生產力，很多打開看看就關閉，下面這些軟件不求精通，至少要知道怎麼使用吧。</p><p>Procreate、MarginNote 3、Clip Studio Paint、Photoshop、Sai、Github、Hexo、Anki、OneNote、Blender、AE、Pr</p><h5 id="遊戲"><a href="#遊戲" class="headerlink" title="遊戲"></a>遊戲</h5><p>去年和今年買了一些經典的遊戲，不過只是買了而沒有摸透，甚至很多還不知道怎麼玩，花錢買了遊戲還得花時間玩。</p><p>Minecraft、Disco Elysium、Human Resource Machine、Cities:Skylines、Kerbal Space Program、Hacknet、Terraria、GTA5</p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 無題 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V2Ray服务器安装脚本及K2P路由器配置</title>
      <link href="/2020/03/01/V2Ray%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E5%8F%8AK2P%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/01/V2Ray%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E5%8F%8AK2P%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h2><p>我的VPS使用CentOS8系统，可直接开启BBR：</p><pre><code class="sh">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.confsysctl -p</code></pre><p>使用<strong>Vmess+websocket+TLS+Nginx+Website</strong>的一键安装脚本（适用于：Debian 9+ / Ubuntu 18.04+ / Centos7+）</p><p><code>bash &lt;(curl -L -s https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/master/install_h2.sh) | tee v2ray_ins_h2.log</code></p><p><strong>脚本管理命令</strong></p><p>启动 V2ray：<code>systemctl start v2ray</code></p><p>停止 V2ray：<code>systemctl stop v2ray</code></p><p>启动 Nginx：<code>systemctl start nginx</code></p><p>停止 Nginx：<code>systemctl stop nginx</code></p><p><strong>脚本相关目录</strong></p><p>Web 目录：<code>/home/wwwroot/levis</code></p><p>V2ray 服务端配置：<code>/etc/v2ray/config.json</code></p><p>V2ray 客户端配置：执行安装时所在目录下的 <code>v2ray_info.txt</code></p><p>Nginx 目录：<code>/etc/nginx</code></p><p>证书目录：<code>/data/v2ray.key 和 /data/v2ray.crt</code></p><h2 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h2><p>参考链接：<a href="http://iytc.net/wordpress/?p=4243" target="_blank" rel="noopener">http://iytc.net/wordpress/?p=4243</a></p><pre><code class="js">{  &quot;inbound&quot;: {    &quot;protocol&quot;: &quot;dokodemo-door&quot;,    &quot;port&quot;: 1234,      &quot;settings&quot;: {    &quot;network&quot;: &quot;tcp&quot;,    &quot;timeout&quot;: 30,    &quot;followRedirect&quot;: true    }  },  &quot;outbound&quot;: {    &quot;protocol&quot;: &quot;vmess&quot;,    &quot;settings&quot;: {    &quot;udp&quot;: true,      &quot;vnext&quot;: [{        &quot;address&quot;: &quot;fuckgfw.tk&quot;,         &quot;port&quot;: 443,       &quot;users&quot;: [        {          &quot;id&quot;: &quot;1c1d2c2a-c4b7-47ed-b339-27af5a676dba&quot;,          &quot;alterId&quot;: 64,          &quot;security&quot;: &quot;auto&quot;,          &quot;level&quot;: 0        }          ]      }]    },    &quot;streamSettings&quot;: {      &quot;network&quot;: &quot;ws&quot;,      &quot;security&quot;: &quot;tls&quot;,      &quot;tlsSettings&quot;: {        &quot;serverName&quot;: &quot;fuckgfw.tk&quot;,        &quot;allowInsecure&quot;: true       },      &quot;wsSettings&quot;: {        &quot;connectionReuse&quot;: true,        &quot;path&quot;: &quot;/19890604/&quot;      }    }}}</code></pre><p>下面为一键安装脚本备份</p><pre><code class="sh">#!/bin/bashPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/binexport PATHcd &quot;$(    cd &quot;$(dirname &quot;$0&quot;)&quot; || exit    pwd)&quot; || exit#====================================================#    System Request:Debian 9+/Ubuntu 18.04+/Centos 7+#    Author:    wulabing#    Dscription: V2ray ws+tls onekey Management#    Version: 1.0#    email:admin@wulabing.com#    Official document: www.v2ray.com#====================================================#fonts colorGreen=&quot;\033[32m&quot;Red=&quot;\033[31m&quot;# Yellow=&quot;\033[33m&quot;GreenBG=&quot;\033[42;37m&quot;RedBG=&quot;\033[41;37m&quot;Font=&quot;\033[0m&quot;#notification information# Info=&quot;${Green}[信息]${Font}&quot;OK=&quot;${Green}[OK]${Font}&quot;Error=&quot;${Red}[错误]${Font}&quot;# 版本shell_version=&quot;1.1.3.2&quot;shell_mode=&quot;None&quot;github_branch=&quot;master&quot;version_cmp=&quot;/tmp/version_cmp.tmp&quot;v2ray_conf_dir=&quot;/etc/v2ray&quot;nginx_conf_dir=&quot;/etc/nginx/conf/conf.d&quot;v2ray_conf=&quot;${v2ray_conf_dir}/config.json&quot;nginx_conf=&quot;${nginx_conf_dir}/v2ray.conf&quot;nginx_dir=&quot;/etc/nginx&quot;web_dir=&quot;/home/wwwroot&quot;nginx_openssl_src=&quot;/usr/local/src&quot;v2ray_bin_dir=&quot;/usr/bin/v2ray&quot;v2ray_info_file=&quot;$HOME/v2ray_info.inf&quot;v2ray_qr_config_file=&quot;/usr/local/vmess_qr.json&quot;nginx_systemd_file=&quot;/etc/systemd/system/nginx.service&quot;v2ray_systemd_file=&quot;/etc/systemd/system/v2ray.service&quot;v2ray_access_log=&quot;/var/log/v2ray/access.log&quot;v2ray_error_log=&quot;/var/log/v2ray/error.log&quot;amce_sh_file=&quot;/root/.acme.sh/acme.sh&quot;ssl_update_file=&quot;/usr/bin/ssl_update.sh&quot;nginx_version=&quot;1.16.1&quot;openssl_version=&quot;1.1.1d&quot;jemalloc_version=&quot;5.2.1&quot;old_config_status=&quot;off&quot;# v2ray_plugin_version=&quot;$(wget -qO- &quot;https://github.com/shadowsocks/v2ray-plugin/tags&quot; | grep -E &quot;/shadowsocks/v2ray-plugin/releases/tag/&quot; | head -1 | sed -r &#39;s/.*tag\/v(.+)\&quot;&gt;.*/\1/&#39;)&quot;#移动旧版本配置信息 对小于 1.1.0 版本适配[[ -f &quot;/etc/v2ray/vmess_qr.json&quot; ]] &amp;&amp; mv /etc/v2ray/vmess_qr.json $v2ray_qr_config_file#生成伪装路径camouflage=&quot;/$(head -n 10 /dev/urandom | md5sum | head -c 8)/&quot;source &#39;/etc/os-release&#39;#从VERSION中提取发行版系统的英文名称，为了在debian/ubuntu下添加相对应的Nginx apt源VERSION=$(echo &quot;${VERSION}&quot; | awk -F &quot;[()]&quot; &#39;{print $2}&#39;)check_system() {    if [[ &quot;${ID}&quot; == &quot;centos&quot; &amp;&amp; ${VERSION_ID} -ge 7 ]]; then        echo -e &quot;${OK} ${GreenBG} 当前系统为 Centos ${VERSION_ID} ${VERSION} ${Font}&quot;        INS=&quot;yum&quot;    elif [[ &quot;${ID}&quot; == &quot;debian&quot; &amp;&amp; ${VERSION_ID} -ge 8 ]]; then        echo -e &quot;${OK} ${GreenBG} 当前系统为 Debian ${VERSION_ID} ${VERSION} ${Font}&quot;        INS=&quot;apt&quot;        $INS update        ## 添加 Nginx apt源    elif [[ &quot;${ID}&quot; == &quot;ubuntu&quot; &amp;&amp; $(echo &quot;${VERSION_ID}&quot; | cut -d &#39;.&#39; -f1) -ge 16 ]]; then        echo -e &quot;${OK} ${GreenBG} 当前系统为 Ubuntu ${VERSION_ID} ${UBUNTU_CODENAME} ${Font}&quot;        INS=&quot;apt&quot;        $INS update    else        echo -e &quot;${Error} ${RedBG} 当前系统为 ${ID} ${VERSION_ID} 不在支持的系统列表内，安装中断 ${Font}&quot;        exit 1    fi$INS install dbussystemctl stop firewalld    systemctl disable firewalld    echo -e &quot;${OK} ${GreenBG} firewalld 已关闭 ${Font}&quot;systemctl stop ufw    systemctl disable ufw    echo -e &quot;${OK} ${GreenBG} ufw 已关闭 ${Font}&quot;}is_root() {    if [ 0 == $UID ]; then        echo -e &quot;${OK} ${GreenBG} 当前用户是root用户，进入安装流程 ${Font}&quot;        sleep 3    else        echo -e &quot;${Error} ${RedBG} 当前用户不是root用户，请切换到root用户后重新执行脚本 ${Font}&quot;        exit 1    fi}judge() {    if [[ 0 -eq $? ]]; then        echo -e &quot;${OK} ${GreenBG} $1 完成 ${Font}&quot;        sleep 1    else        echo -e &quot;${Error} ${RedBG} $1 失败${Font}&quot;        exit 1    fi}chrony_install() {    ${INS} -y install chrony    judge &quot;安装 chrony 时间同步服务 &quot;timedatectl set-ntp trueif [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        systemctl enable chronyd &amp;&amp; systemctl restart chronyd    else        systemctl enable chrony &amp;&amp; systemctl restart chrony    fijudge &quot;chronyd 启动 &quot;timedatectl set-timezone Asia/Shanghaiecho -e &quot;${OK} ${GreenBG} 等待时间同步 ${Font}&quot;    sleep 10chronyc sourcestats -v    chronyc tracking -v    date    read -rp &quot;请确认时间是否准确,误差范围±3分钟(Y/N): &quot; chrony_install    [[ -z ${chrony_install} ]] &amp;&amp; chrony_install=&quot;Y&quot;    case $chrony_install in    [yY][eE][sS] | [yY])        echo -e &quot;${GreenBG} 继续安装 ${Font}&quot;        sleep 2        ;;    *)        echo -e &quot;${RedBG} 安装终止 ${Font}&quot;        exit 2        ;;    esac}dependency_install() {    ${INS} install wget git lsof -yif [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        ${INS} -y install crontabs    else        ${INS} -y install cron    fi    judge &quot;安装 crontab&quot;if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        touch /var/spool/cron/root &amp;&amp; chmod 600 /var/spool/cron/root        systemctl start crond &amp;&amp; systemctl enable crond    else        touch /var/spool/cron/crontabs/root &amp;&amp; chmod 600 /var/spool/cron/crontabs/root        systemctl start cron &amp;&amp; systemctl enable cronfi    judge &quot;crontab 自启动配置 &quot;${INS} -y install bc    judge &quot;安装 bc&quot;${INS} -y install unzip    judge &quot;安装 unzip&quot;${INS} -y install qrencode    judge &quot;安装 qrencode&quot;${INS} -y install curl    judge &quot;安装 crul&quot;if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        ${INS} -y groupinstall &quot;Development tools&quot;    else        ${INS} -y install build-essential    fi    judge &quot;编译工具包 安装&quot;if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        ${INS} -y install pcre pcre-devel zlib-devel epel-release    else        ${INS} -y install libpcre3 libpcre3-dev zlib1g-dev dbus    fi#    ${INS} -y install rng-tools    #    judge &quot;rng-tools 安装&quot;${INS} -y install haveged    #    judge &quot;haveged 安装&quot;#    sed -i -r &#39;/^HRNGDEVICE/d;/#HRNGDEVICE=\/dev\/null/a HRNGDEVICE=/dev/urandom&#39; /etc/default/rng-toolsif [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        #       systemctl start rngd &amp;&amp; systemctl enable rngd        #       judge &quot;rng-tools 启动&quot;        systemctl start haveged &amp;&amp; systemctl enable haveged        #       judge &quot;haveged 启动&quot;    else        #       systemctl start rng-tools &amp;&amp; systemctl enable rng-tools        #       judge &quot;rng-tools 启动&quot;        systemctl start haveged &amp;&amp; systemctl enable haveged        #       judge &quot;haveged 启动&quot;    fi}basic_optimization() {    # 最大文件打开数    sed -i &#39;/^\*\ *soft\ *nofile\ *[[:digit:]]*/d&#39; /etc/security/limits.conf    sed -i &#39;/^\*\ *hard\ *nofile\ *[[:digit:]]*/d&#39; /etc/security/limits.conf    echo &#39;* soft nofile 65536&#39; &gt;&gt;/etc/security/limits.conf    echo &#39;* hard nofile 65536&#39; &gt;&gt;/etc/security/limits.conf# 关闭 Selinux    if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        sed -i &#39;s/^SELINUX=.*/SELINUX=disabled/&#39; /etc/selinux/config        setenforce 0    fi}port_alterid_set() {    if [[ &quot;on&quot; != &quot;$old_config_status&quot; ]]; then        read -rp &quot;请输入连接端口（default:443）:&quot; port        [[ -z ${port} ]] &amp;&amp; port=&quot;443&quot;        read -rp &quot;请输入alterID（default:2 仅允许填数字）:&quot; alterID        [[ -z ${alterID} ]] &amp;&amp; alterID=&quot;2&quot;    fi}modify_path() {    if [[ &quot;on&quot; == &quot;$old_config_status&quot; ]]; then        camouflage=&quot;$(grep &#39;\&quot;path\&quot;&#39; $v2ray_qr_config_file | awk -F &#39;&quot;&#39; &#39;{print $4}&#39;)&quot;    fi    sed -i &quot;/\&quot;path\&quot;/c \\\t  \&quot;path\&quot;:\&quot;${camouflage}\&quot;&quot; ${v2ray_conf}    judge &quot;V2ray 伪装路径 修改&quot;}modify_alterid() {    if [[ &quot;on&quot; == &quot;$old_config_status&quot; ]]; then        alterID=&quot;$(grep &#39;\&quot;aid\&quot;&#39; $v2ray_qr_config_file | awk -F &#39;&quot;&#39; &#39;{print $4}&#39;)&quot;    fi    sed -i &quot;/\&quot;alterId\&quot;/c \\\t  \&quot;alterId\&quot;:${alterID}&quot; ${v2ray_conf}    judge &quot;V2ray alterid 修改&quot;    [ -f ${v2ray_qr_config_file} ] &amp;&amp; sed -i &quot;/\&quot;aid\&quot;/c \\  \&quot;aid\&quot;: \&quot;${alterID}\&quot;,&quot; ${v2ray_qr_config_file}    echo -e &quot;${OK} ${GreenBG} alterID:${alterID} ${Font}&quot;}modify_inbound_port() {    if [[ &quot;on&quot; == &quot;$old_config_status&quot; ]]; then        port=&quot;$(info_extraction &#39;\&quot;port\&quot;&#39;)&quot;    fi    if [[ &quot;$shell_mode&quot; != &quot;h2&quot; ]]; then        PORT=$((RANDOM + 10000))        sed -i &quot;/\&quot;port\&quot;/c  \    \&quot;port\&quot;:${PORT},&quot; ${v2ray_conf}    else        sed -i &quot;/\&quot;port\&quot;/c  \    \&quot;port\&quot;:${port},&quot; ${v2ray_conf}    fi    judge &quot;V2ray inbound_port 修改&quot;}modify_UUID() {    [ -z &quot;$UUID&quot; ] &amp;&amp; UUID=$(cat /proc/sys/kernel/random/uuid)    if [[ &quot;on&quot; == &quot;$old_config_status&quot; ]]; then        UUID=&quot;$(info_extraction &#39;\&quot;id\&quot;&#39;)&quot;    fi    sed -i &quot;/\&quot;id\&quot;/c \\\t  \&quot;id\&quot;:\&quot;${UUID}\&quot;,&quot; ${v2ray_conf}    judge &quot;V2ray UUID 修改&quot;    [ -f ${v2ray_qr_config_file} ] &amp;&amp; sed -i &quot;/\&quot;id\&quot;/c \\  \&quot;id\&quot;: \&quot;${UUID}\&quot;,&quot; ${v2ray_qr_config_file}    echo -e &quot;${OK} ${GreenBG} UUID:${UUID} ${Font}&quot;}modify_nginx_port() {    if [[ &quot;on&quot; == &quot;$old_config_status&quot; ]]; then        port=&quot;$(info_extraction &#39;\&quot;port\&quot;&#39;)&quot;    fi    sed -i &quot;/ssl http2;$/c \\\tlisten ${port} ssl http2;&quot; ${nginx_conf}    judge &quot;V2ray port 修改&quot;    [ -f ${v2ray_qr_config_file} ] &amp;&amp; sed -i &quot;/\&quot;port\&quot;/c \\  \&quot;port\&quot;: \&quot;${port}\&quot;,&quot; ${v2ray_qr_config_file}    echo -e &quot;${OK} ${GreenBG} 端口号:${port} ${Font}&quot;}modify_nginx_other() {    sed -i &quot;/server_name/c \\\tserver_name ${domain};&quot; ${nginx_conf}    sed -i &quot;/location/c \\\tlocation ${camouflage}&quot; ${nginx_conf}    sed -i &quot;/proxy_pass/c \\\tproxy_pass http://127.0.0.1:${PORT};&quot; ${nginx_conf}    sed -i &quot;/return/c \\\treturn 301 https://${domain}\$request_uri;&quot; ${nginx_conf}    #sed -i &quot;27i \\\tproxy_intercept_errors on;&quot;  ${nginx_dir}/conf/nginx.conf}web_camouflage() {    ##请注意 这里和LNMP脚本的默认路径冲突，千万不要在安装了LNMP的环境下使用本脚本，否则后果自负    rm -rf /home/wwwroot    mkdir -p /home/wwwroot    cd /home/wwwroot || exit    git clone https://github.com/wulabing/3DCEList.git    judge &quot;web 站点伪装&quot;}v2ray_install() {    if [[ -d /root/v2ray ]]; then        rm -rf /root/v2ray    fi    if [[ -d /etc/v2ray ]]; then        rm -rf /etc/v2ray    fi    mkdir -p /root/v2ray    cd /root/v2ray || exit    wget -N --no-check-certificate https://install.direct/go.sh## wget http://install.direct/go.shif [[ -f go.sh ]]; then        rm -rf $v2ray_systemd_file        systemctl daemon-reload        bash go.sh --force        judge &quot;安装 V2ray&quot;    else        echo -e &quot;${Error} ${RedBG} V2ray 安装文件下载失败，请检查下载地址是否可用 ${Font}&quot;        exit 4    fi    # 清除临时文件    rm -rf /root/v2ray}nginx_exist_check() {    if [[ -f &quot;/etc/nginx/sbin/nginx&quot; ]]; then        echo -e &quot;${OK} ${GreenBG} Nginx已存在，跳过编译安装过程 ${Font}&quot;        sleep 2    elif [[ -d &quot;/usr/local/nginx/&quot; ]]; then        echo -e &quot;${OK} ${GreenBG} 检测到其他套件安装的Nginx，继续安装会造成冲突，请处理后安装${Font}&quot;        exit 1    else        nginx_install    fi}nginx_install() {    #    if [[ -d &quot;/etc/nginx&quot; ]];then    #        rm -rf /etc/nginx    #    fiwget -nc --no-check-certificate http://nginx.org/download/nginx-${nginx_version}.tar.gz -P ${nginx_openssl_src}    judge &quot;Nginx 下载&quot;    wget -nc --no-check-certificate https://www.openssl.org/source/openssl-${openssl_version}.tar.gz -P ${nginx_openssl_src}    judge &quot;openssl 下载&quot;    wget -nc --no-check-certificate https://github.com/jemalloc/jemalloc/releases/download/${jemalloc_version}/jemalloc-${jemalloc_version}.tar.bz2 -P ${nginx_openssl_src}    judge &quot;jemalloc 下载&quot;cd ${nginx_openssl_src} || exit[[ -d nginx-&quot;$nginx_version&quot; ]] &amp;&amp; rm -rf nginx-&quot;$nginx_version&quot;    tar -zxvf nginx-&quot;$nginx_version&quot;.tar.gz[[ -d openssl-&quot;$openssl_version&quot; ]] &amp;&amp; rm -rf openssl-&quot;$openssl_version&quot;    tar -zxvf openssl-&quot;$openssl_version&quot;.tar.gz[[ -d jemalloc-&quot;${jemalloc_version}&quot; ]] &amp;&amp; rm -rf jemalloc-&quot;${jemalloc_version}&quot;    tar -xvf jemalloc-&quot;${jemalloc_version}&quot;.tar.bz2[[ -d &quot;$nginx_dir&quot; ]] &amp;&amp; rm -rf ${nginx_dir}echo -e &quot;${OK} ${GreenBG} 即将开始编译安装 jemalloc ${Font}&quot;    sleep 2cd jemalloc-${jemalloc_version} || exit    ./configure    judge &quot;编译检查&quot;    make &amp;&amp; make install    judge &quot;jemalloc 编译安装&quot;    echo &#39;/usr/local/lib&#39; &gt;/etc/ld.so.conf.d/local.conf    ldconfigecho -e &quot;${OK} ${GreenBG} 即将开始编译安装 Nginx, 过程稍久，请耐心等待 ${Font}&quot;    sleep 4cd ../nginx-${nginx_version} || exit./configure --prefix=&quot;${nginx_dir}&quot; \        --with-http_ssl_module \        --with-http_gzip_static_module \        --with-http_stub_status_module \        --with-pcre \        --with-http_realip_module \        --with-http_flv_module \        --with-http_mp4_module \        --with-http_secure_link_module \        --with-http_v2_module \        --with-cc-opt=&#39;-O3&#39; \        --with-ld-opt=&quot;-ljemalloc&quot; \        --with-openssl=../openssl-&quot;$openssl_version&quot;    judge &quot;编译检查&quot;    make &amp;&amp; make install    judge &quot;Nginx 编译安装&quot;# 修改基本配置    sed -i &#39;s/#user  nobody;/user  root;/&#39; ${nginx_dir}/conf/nginx.conf    sed -i &#39;s/worker_processes  1;/worker_processes  3;/&#39; ${nginx_dir}/conf/nginx.conf    sed -i &#39;s/    worker_connections  1024;/    worker_connections  4096;/&#39; ${nginx_dir}/conf/nginx.conf    sed -i &#39;$i include conf.d/*.conf;&#39; ${nginx_dir}/conf/nginx.conf# 删除临时文件    rm -rf ../nginx-&quot;${nginx_version}&quot;    rm -rf ../openssl-&quot;${openssl_version}&quot;    rm -rf ../nginx-&quot;${nginx_version}&quot;.tar.gz    rm -rf ../openssl-&quot;${openssl_version}&quot;.tar.gz# 添加配置文件夹，适配旧版脚本    mkdir ${nginx_dir}/conf/conf.d}ssl_install() {    if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        ${INS} install socat nc -y    else        ${INS} install socat netcat -y    fi    judge &quot;安装 SSL 证书生成脚本依赖&quot;curl https://get.acme.sh | sh    judge &quot;安装 SSL 证书生成脚本&quot;}domain_check() {    read -rp &quot;请输入你的域名信息(eg:www.wulabing.com):&quot; domain    domain_ip=$(ping &quot;${domain}&quot; -c 1 | sed &#39;1{s/[^(]*(//;s/).*//;q}&#39;)    echo -e &quot;${OK} ${GreenBG} 正在获取 公网ip 信息，请耐心等待 ${Font}&quot;    local_ip=$(curl -4 ip.sb)    echo -e &quot;域名dns解析IP：${domain_ip}&quot;    echo -e &quot;本机IP: ${local_ip}&quot;    sleep 2    if [[ $(echo &quot;${local_ip}&quot; | tr &#39;.&#39; &#39;+&#39; | bc) -eq $(echo &quot;${domain_ip}&quot; | tr &#39;.&#39; &#39;+&#39; | bc) ]]; then        echo -e &quot;${OK} ${GreenBG} 域名dns解析IP 与 本机IP 匹配 ${Font}&quot;        sleep 2    else        echo -e &quot;${Error} ${RedBG} 请确保域名添加了正确的 A 记录，否则将无法正常使用 V2ray ${Font}&quot;        echo -e &quot;${Error} ${RedBG} 域名dns解析IP 与 本机IP 不匹配 是否继续安装？（y/n）${Font}&quot; &amp;&amp; read -r install        case $install in        [yY][eE][sS] | [yY])            echo -e &quot;${GreenBG} 继续安装 ${Font}&quot;            sleep 2            ;;        *)            echo -e &quot;${RedBG} 安装终止 ${Font}&quot;            exit 2            ;;        esac    fi}port_exist_check() {    if [[ 0 -eq $(lsof -i:&quot;$1&quot; | grep -i -c &quot;listen&quot;) ]]; then        echo -e &quot;${OK} ${GreenBG} $1 端口未被占用 ${Font}&quot;        sleep 1    else        echo -e &quot;${Error} ${RedBG} 检测到 $1 端口被占用，以下为 $1 端口占用信息 ${Font}&quot;        lsof -i:&quot;$1&quot;        echo -e &quot;${OK} ${GreenBG} 5s 后将尝试自动 kill 占用进程 ${Font}&quot;        sleep 5        lsof -i:&quot;$1&quot; | awk &#39;{print $2}&#39; | grep -v &quot;PID&quot; | xargs kill -9        echo -e &quot;${OK} ${GreenBG} kill 完成 ${Font}&quot;        sleep 1    fi}acme() {    if &quot;$HOME&quot;/.acme.sh/acme.sh --issue -d &quot;${domain}&quot; --standalone -k ec-256 --force --test; then        echo -e &quot;${OK} ${GreenBG} SSL 证书测试签发成功，开始正式签发 ${Font}&quot;        rm -rf &quot;$HOME/.acme.sh/${domain}_ecc&quot;        sleep 2    else        echo -e &quot;${Error} ${RedBG} SSL 证书测试签发失败 ${Font}&quot;        rm -rf &quot;$HOME/.acme.sh/${domain}_ecc&quot;        exit 1    fiif &quot;$HOME&quot;/.acme.sh/acme.sh --issue -d &quot;${domain}&quot; --standalone -k ec-256 --force; then        echo -e &quot;${OK} ${GreenBG} SSL 证书生成成功 ${Font}&quot;        sleep 2        mkdir /data        if &quot;$HOME&quot;/.acme.sh/acme.sh --installcert -d &quot;${domain}&quot; --fullchainpath /data/v2ray.crt --keypath /data/v2ray.key --ecc --force; then            echo -e &quot;${OK} ${GreenBG} 证书配置成功 ${Font}&quot;            sleep 2        fi    else        echo -e &quot;${Error} ${RedBG} SSL 证书生成失败 ${Font}&quot;        rm -rf &quot;$HOME/.acme.sh/${domain}_ecc&quot;        exit 1    fi}v2ray_conf_add_tls() {    cd /etc/v2ray || exit    wget --no-check-certificate https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/tls/config.json -O config.json    modify_path    modify_alterid    modify_inbound_port    modify_UUID}v2ray_conf_add_h2() {    cd /etc/v2ray || exit    wget --no-check-certificate https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/http2/config.json -O config.json    modify_path    modify_alterid    modify_inbound_port    modify_UUID}old_config_exist_check() {    if [[ -f $v2ray_qr_config_file ]]; then        echo -e &quot;${OK} ${GreenBG} 检测到旧配置文件，是否读取旧文件配置 [Y/N]? ${Font}&quot;        read -r ssl_delete        case $ssl_delete in        [yY][eE][sS] | [yY])            echo -e &quot;${OK} ${GreenBG} 已保留旧配置  ${Font}&quot;            old_config_status=&quot;on&quot;            port=$(info_extraction &#39;\&quot;port\&quot;&#39;)            ;;        *)            rm -rf $v2ray_qr_config_file            echo -e &quot;${OK} ${GreenBG} 已删除旧配置  ${Font}&quot;            ;;        esac    fi}nginx_conf_add() {    touch ${nginx_conf_dir}/v2ray.conf    cat &gt;${nginx_conf_dir}/v2ray.conf &lt;&lt;EOF    server {        listen 443 ssl http2;        ssl_certificate       /data/v2ray.crt;        ssl_certificate_key   /data/v2ray.key;        ssl_protocols         TLSv1.3;        ssl_ciphers           TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;        server_name           serveraddr.com;        index index.html index.htm;        root  /home/wwwroot/3DCEList;        error_page 400 = /400.html;        location /ray/        {        proxy_redirect off;        proxy_pass http://127.0.0.1:10000;        proxy_http_version 1.1;        proxy_set_header X-Real-IP \$remote_addr;        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;        proxy_set_header Upgrade \$http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host \$http_host;        }}    server {        listen 80;        server_name serveraddr.com;        return 301 https://use.shadowsocksr.win\$request_uri;    }EOFmodify_nginx_port    modify_nginx_other    judge &quot;Nginx 配置修改&quot;}start_process_systemd() {    systemctl daemon-reload    if [[ &quot;$shell_mode&quot; != &quot;h2&quot; ]]; then        systemctl restart nginx        judge &quot;Nginx 启动&quot;    fi    systemctl restart v2ray    judge &quot;V2ray 启动&quot;}enable_process_systemd() {    systemctl enable v2ray    judge &quot;设置 v2ray 开机自启&quot;    if [[ &quot;$shell_mode&quot; != &quot;h2&quot; ]]; then        systemctl enable nginx        judge &quot;设置 Nginx 开机自启&quot;    fi}stop_process_systemd() {    if [[ &quot;$shell_mode&quot; != &quot;h2&quot; ]]; then        systemctl stop nginx    fi    systemctl stop v2ray}nginx_process_disabled() {    [ -f $nginx_systemd_file ] &amp;&amp; systemctl stop nginx &amp;&amp; systemctl disable nginx}#debian 系 9 10 适配#rc_local_initialization(){#    if [[ -f /etc/rc.local ]];then#        chmod +x /etc/rc.local#    else#        touch /etc/rc.local &amp;&amp; chmod +x /etc/rc.local#        echo &quot;#!/bin/bash&quot; &gt;&gt; /etc/rc.local#        systemctl start rc-local#    fi##    judge &quot;rc.local 配置&quot;#}acme_cron_update() {    wget -N -P /usr/bin --no-check-certificate &quot;https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/dev/ssl_update.sh&quot;    if [[ &quot;${ID}&quot; == &quot;centos&quot; ]]; then        #        sed -i &quot;/acme.sh/c 0 3 * * 0 \&quot;/root/.acme.sh\&quot;/acme.sh --cron --home \&quot;/root/.acme.sh\&quot; \        #        &amp;&gt; /dev/null&quot; /var/spool/cron/root        sed -i &quot;/acme.sh/c 0 3 * * 0 bash ${ssl_update_file}&quot; /var/spool/cron/root    else        #        sed -i &quot;/acme.sh/c 0 3 * * 0 \&quot;/root/.acme.sh\&quot;/acme.sh --cron --home \&quot;/root/.acme.sh\&quot; \        #        &amp;&gt; /dev/null&quot; /var/spool/cron/crontabs/root        sed -i &quot;/acme.sh/c 0 3 * * 0 bash ${ssl_update_file}&quot; /var/spool/cron/crontabs/root    fi    judge &quot;cron 计划任务更新&quot;}vmess_qr_config_tls_ws() {    cat &gt;$v2ray_qr_config_file &lt;&lt;-EOF{  &quot;v&quot;: &quot;2&quot;,  &quot;ps&quot;: &quot;wulabing_${domain}&quot;,  &quot;add&quot;: &quot;${domain}&quot;,  &quot;port&quot;: &quot;${port}&quot;,  &quot;id&quot;: &quot;${UUID}&quot;,  &quot;aid&quot;: &quot;${alterID}&quot;,  &quot;net&quot;: &quot;ws&quot;,  &quot;type&quot;: &quot;none&quot;,  &quot;host&quot;: &quot;${domain}&quot;,  &quot;path&quot;: &quot;${camouflage}&quot;,  &quot;tls&quot;: &quot;tls&quot;}EOF}vmess_qr_config_h2() {    cat &gt;$v2ray_qr_config_file &lt;&lt;-EOF{  &quot;v&quot;: &quot;2&quot;,  &quot;ps&quot;: &quot;wulabing_${domain}&quot;,  &quot;add&quot;: &quot;${domain}&quot;,  &quot;port&quot;: &quot;${port}&quot;,  &quot;id&quot;: &quot;${UUID}&quot;,  &quot;aid&quot;: &quot;${alterID}&quot;,  &quot;net&quot;: &quot;h2&quot;,  &quot;type&quot;: &quot;none&quot;,  &quot;path&quot;: &quot;${camouflage}&quot;,  &quot;tls&quot;: &quot;tls&quot;}EOF}vmess_qr_link_image() {    vmess_link=&quot;vmess://$(base64 -w 0 $v2ray_qr_config_file)&quot;    {        echo -e &quot;$Red 二维码: $Font&quot;        echo -n &quot;${vmess_link}&quot; | qrencode -o - -t utf8        echo -e &quot;${Red} URL导入链接:${vmess_link} ${Font}&quot;    } &gt;&gt;&quot;${v2ray_info_file}&quot;}info_extraction() {    grep &quot;$1&quot; $v2ray_qr_config_file | awk -F &#39;&quot;&#39; &#39;{print $4}&#39;}basic_information() {    {        echo -e &quot;${OK} ${GreenBG} V2ray+ws+tls 安装成功&quot;        echo -e &quot;${Red} V2ray 配置信息 ${Font}&quot;        echo -e &quot;${Red} 地址（address）:${Font} $(info_extraction &#39;\&quot;add\&quot;&#39;) &quot;        echo -e &quot;${Red} 端口（port）：${Font} $(info_extraction &#39;\&quot;port\&quot;&#39;) &quot;        echo -e &quot;${Red} 用户id（UUID）：${Font} $(info_extraction &#39;\&quot;id\&quot;&#39;)&quot;        echo -e &quot;${Red} 额外id（alterId）：${Font} $(info_extraction &#39;\&quot;aid\&quot;&#39;)&quot;        echo -e &quot;${Red} 加密方式（security）：${Font} 自适应 &quot;        echo -e &quot;${Red} 传输协议（network）：${Font} $(info_extraction &#39;\&quot;net\&quot;&#39;) &quot;        echo -e &quot;${Red} 伪装类型（type）：${Font} none &quot;        echo -e &quot;${Red} 路径（不要落下/）：${Font} $(info_extraction &#39;\&quot;path\&quot;&#39;) &quot;        echo -e &quot;${Red} 底层传输安全：${Font} tls &quot;    } &gt;&quot;${v2ray_info_file}&quot;}show_information() {    cat &quot;${v2ray_info_file}&quot;}ssl_judge_and_install() {    if [[ -f &quot;/data/v2ray.key&quot; || -f &quot;/data/v2ray.crt&quot; ]]; then        echo &quot;/data 目录下证书文件已存在&quot;        echo -e &quot;${OK} ${GreenBG} 是否删除 [Y/N]? ${Font}&quot;        read -r ssl_delete        case $ssl_delete in        [yY][eE][sS] | [yY])            rm -rf /data/*            echo -e &quot;${OK} ${GreenBG} 已删除 ${Font}&quot;            ;;        *) ;;esac    fiif [[ -f &quot;/data/v2ray.key&quot; || -f &quot;/data/v2ray.crt&quot; ]]; then        echo &quot;证书文件已存在&quot;    elif [[ -f &quot;$HOME/.acme.sh/${domain}_ecc/${domain}.key&quot; &amp;&amp; -f &quot;$HOME/.acme.sh/${domain}_ecc/${domain}.cer&quot; ]]; then        echo &quot;证书文件已存在&quot;        &quot;$HOME&quot;/.acme.sh/acme.sh --installcert -d &quot;${domain}&quot; --fullchainpath /data/v2ray.crt --keypath /data/v2ray.key --ecc        judge &quot;证书应用&quot;    else        ssl_install        acme    fi}nginx_systemd() {    cat &gt;$nginx_systemd_file &lt;&lt;EOF[Unit]Description=The NGINX HTTP and reverse proxy serverAfter=syslog.target network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/etc/nginx/logs/nginx.pidExecStartPre=/etc/nginx/sbin/nginx -tExecStart=/etc/nginx/sbin/nginx -c ${nginx_dir}/conf/nginx.confExecReload=/etc/nginx/sbin/nginx -s reloadExecStop=/bin/kill -s QUIT \$MAINPIDPrivateTmp=true[Install]WantedBy=multi-user.targetEOFjudge &quot;Nginx systemd ServerFile 添加&quot;    systemctl daemon-reload}tls_type() {    if [[ -f &quot;/etc/nginx/sbin/nginx&quot; ]] &amp;&amp; [[ -f &quot;$nginx_conf&quot; ]] &amp;&amp; [[ &quot;$shell_mode&quot; == &quot;ws&quot; ]]; then        echo &quot;请选择支持的 TLS 版本（default:3）:&quot;        echo &quot;请注意,如果你使用 Quantaumlt X / 路由器 / 旧版 Shadowrocket / 低于 4.18.1 版本的 V2ray core 请选择 兼容模式&quot;        echo &quot;1: TLS1.1 TLS1.2 and TLS1.3（兼容模式）&quot;        echo &quot;2: TLS1.2 and TLS1.3 (兼容模式)&quot;        echo &quot;3: TLS1.3 only&quot;        read -rp &quot;请输入：&quot; tls_version        [[ -z ${tls_version} ]] &amp;&amp; tls_version=3        if [[ $tls_version == 3 ]]; then            sed -i &#39;s/ssl_protocols.*/ssl_protocols         TLSv1.3;/&#39; $nginx_conf            echo -e &quot;${OK} ${GreenBG} 已切换至 TLS1.3 only ${Font}&quot;        elif [[ $tls_version == 1 ]]; then            sed -i &#39;s/ssl_protocols.*/ssl_protocols         TLSv1.1 TLSv1.2 TLSv1.3;/&#39; $nginx_conf            echo -e &quot;${OK} ${GreenBG} 已切换至 TLS1.1 TLS1.2 and TLS1.3 ${Font}&quot;        else            sed -i &#39;s/ssl_protocols.*/ssl_protocols         TLSv1.2 TLSv1.3;/&#39; $nginx_conf            echo -e &quot;${OK} ${GreenBG} 已切换至 TLS1.2 and TLS1.3 ${Font}&quot;        fi        systemctl restart nginx        judge &quot;Nginx 重启&quot;    else        echo -e &quot;${Error} ${RedBG} Nginx 或 配置文件不存在 或当前安装版本为 h2 ，请正确安装脚本后执行${Font}&quot;    fi}show_access_log() {    [ -f ${v2ray_access_log} ] &amp;&amp; tail -f ${v2ray_access_log} || echo -e &quot;${RedBG}log文件不存在${Font}&quot;}show_error_log() {    [ -f ${v2ray_error_log} ] &amp;&amp; tail -f ${v2ray_error_log} || echo -e &quot;${RedBG}log文件不存在${Font}&quot;}ssl_update_manuel() {    [ -f ${amce_sh_file} ] &amp;&amp; &quot;/root/.acme.sh&quot;/acme.sh --cron --home &quot;/root/.acme.sh&quot; || echo -e &quot;${RedBG}证书签发工具不存在，请确认你是否使用了自己的证书${Font}&quot;    domain=&quot;$(info_extraction &#39;\&quot;add\&quot;&#39;)&quot;    &quot;$HOME&quot;/.acme.sh/acme.sh --installcert -d &quot;${domain}&quot; --fullchainpath /data/v2ray.crt --keypath /data/v2ray.key --ecc}bbr_boost_sh() {    [ -f &quot;tcp.sh&quot; ] &amp;&amp; rm -rf ./tcp.sh    wget -N --no-check-certificate &quot;https://github.com/ylx2016/Linux-NetSpeed/releases/download/sh/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh}mtproxy_sh() {    [ -f &quot;mtproxy_go.sh&quot; ] &amp;&amp; rm -rf ./mtproxy_go.sh    wget -N --no-check-certificate https://github.com/whunt1/onekeymakemtg/raw/master/mtproxy_go.sh &amp;&amp; chmod +x mtproxy_go.sh &amp;&amp; ./mtproxy_go.sh}uninstall_all() {    stop_process_systemd    [[ -f $nginx_systemd_file ]] &amp;&amp; rm -f $nginx_systemd_file    [[ -f $v2ray_systemd_file ]] &amp;&amp; rm -f $v2ray_systemd_file    [[ -d $v2ray_bin_dir ]] &amp;&amp; rm -rf $v2ray_bin_dir    if [[ -d $nginx_dir ]]; then        echo -e &quot;${OK} ${Green} 是否卸载 Nginx [Y/N]? ${Font}&quot;        read -r uninstall_nginx        case $uninstall_nginx in        [yY][eE][sS] | [yY])            rm -rf $nginx_dir            echo -e &quot;${OK} ${Green} 已卸载 Nginx ${Font}&quot;            ;;        *) ;;esac    fi    [[ -d $v2ray_conf_dir ]] &amp;&amp; rm -rf $v2ray_conf_dir    [[ -d $web_dir ]] &amp;&amp; rm -rf $web_dir    systemctl daemon-reload    echo -e &quot;${OK} ${GreenBG} 已卸载，SSL证书文件已保留 ${Font}&quot;}delete_tls_key_and_crt() {    [[ -f $HOME/.acme.sh/acme.sh ]] &amp;&amp; /root/.acme.sh/acme.sh uninstall &gt;/dev/null 2&gt;&amp;1    [[ -d $HOME/.acme.sh ]] &amp;&amp; rm -rf &quot;$HOME/.acme.sh&quot;    echo -e &quot;${OK} ${GreenBG} 已清空证书遗留文件 ${Font}&quot;}judge_mode() {    if [ -f $v2ray_bin_dir/v2ray ]; then        if grep -q &quot;ws&quot; $v2ray_qr_config_file; then            shell_mode=&quot;ws&quot;        elif grep -q &quot;h2&quot; $v2ray_qr_config_file; then            shell_mode=&quot;h2&quot;        fi    fi}install_v2ray_ws_tls() {    is_root    check_system    chrony_install    dependency_install    basic_optimization    domain_check    old_config_exist_check    port_alterid_set    v2ray_install    port_exist_check 80    port_exist_check &quot;${port}&quot;    nginx_exist_check    v2ray_conf_add_tls    nginx_conf_add    web_camouflage    ssl_judge_and_install    nginx_systemd    vmess_qr_config_tls_ws    basic_information    vmess_qr_link_image    tls_type    show_information    start_process_systemd    enable_process_systemd    acme_cron_update}install_v2_h2() {    is_root    check_system    chrony_install    dependency_install    basic_optimization    domain_check    old_config_exist_check    port_alterid_set    v2ray_install    port_exist_check 80    port_exist_check &quot;${port}&quot;    v2ray_conf_add_h2    ssl_judge_and_install    vmess_qr_config_h2    basic_information    vmess_qr_link_image    show_information    start_process_systemd    enable_process_systemd}update_sh() {    ol_version=$(curl -L -s https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/install.sh | grep &quot;shell_version=&quot; | head -1 | awk -F &#39;=|&quot;&#39; &#39;{print $3}&#39;)    echo &quot;$ol_version&quot; &gt;$version_cmp    echo &quot;$shell_version&quot; &gt;&gt;$version_cmp    if [[ &quot;$shell_version&quot; &lt; &quot;$(sort -rV $version_cmp | head -1)&quot; ]]; then        echo -e &quot;${OK} ${GreenBG} 存在新版本，是否更新 [Y/N]? ${Font}&quot;        read -r update_confirm        case $update_confirm in        [yY][eE][sS] | [yY])            wget -N --no-check-certificate https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/install.sh            echo -e &quot;${OK} ${GreenBG} 更新完成 ${Font}&quot;            exit 0            ;;        *) ;;esac    else        echo -e &quot;${OK} ${GreenBG} 当前版本为最新版本 ${Font}&quot;    fi}maintain() {    echo -e &quot;${RedBG}该选项暂时无法使用${Font}&quot;    echo -e &quot;${RedBG}$1${Font}&quot;    exit 0}list() {    case $1 in    tls_modify)        tls_type        ;;    uninstall)        uninstall_all        ;;    crontab_modify)        acme_cron_update        ;;    boost)        bbr_boost_sh        ;;    *)        menu        ;;    esac}menu() {    update_sh    echo -e &quot;\t V2ray 安装管理脚本 ${Red}[${shell_version}]${Font}&quot;    echo -e &quot;\t---authored by wulabing---&quot;    echo -e &quot;\thttps://github.com/wulabing\n&quot;    echo -e &quot;当前已安装版本:${shell_mode}\n&quot;echo -e &quot;—————————————— 安装向导 ——————————————&quot;&quot;&quot;    echo -e &quot;${Green}0.${Font}  升级 脚本&quot;    echo -e &quot;${Green}1.${Font}  安装 V2Ray (Nginx+ws+tls)&quot;    echo -e &quot;${Green}2.${Font}  安装 V2Ray (http/2)&quot;    echo -e &quot;${Green}3.${Font}  升级 V2Ray core&quot;    echo -e &quot;—————————————— 配置变更 ——————————————&quot;    echo -e &quot;${Green}4.${Font}  变更 UUID&quot;    echo -e &quot;${Green}5.${Font}  变更 alterid&quot;    echo -e &quot;${Green}6.${Font}  变更 port&quot;    echo -e &quot;${Green}7.${Font}  变更 TLS 版本(仅ws+tls有效)&quot;    echo -e &quot;—————————————— 查看信息 ——————————————&quot;    echo -e &quot;${Green}8.${Font}  查看 实时访问日志&quot;    echo -e &quot;${Green}9.${Font}  查看 实时错误日志&quot;    echo -e &quot;${Green}10.${Font} 查看 V2Ray 配置信息&quot;    echo -e &quot;—————————————— 其他选项 ——————————————&quot;    echo -e &quot;${Green}11.${Font} 安装 4合1 bbr 锐速安装脚本&quot;    echo -e &quot;${Green}12.${Font} 安装 MTproxy(支持TLS混淆)&quot;    echo -e &quot;${Green}13.${Font} 证书 有效期更新&quot;    echo -e &quot;${Green}14.${Font} 卸载 V2Ray&quot;    echo -e &quot;${Green}15.${Font} 更新 证书crontab计划任务&quot;    echo -e &quot;${Green}16.${Font} 清空 证书遗留文件&quot;    echo -e &quot;${Green}17.${Font} 退出 \n&quot;read -rp &quot;请输入数字：&quot; menu_num    case $menu_num in    0)        update_sh        ;;    1)        shell_mode=&quot;ws&quot;        install_v2ray_ws_tls        ;;    2)        shell_mode=&quot;h2&quot;        install_v2_h2        ;;    3)        bash &lt;(curl -L -s https://install.direct/go.sh)        ;;    4)        read -rp &quot;请输入UUID:&quot; UUID        modify_UUID        start_process_systemd        ;;    5)        read -rp &quot;请输入alterID:&quot; alterID        modify_alterid        start_process_systemd        ;;    6)        read -rp &quot;请输入连接端口:&quot; port        if grep -q &quot;ws&quot; $v2ray_qr_config_file; then            modify_nginx_port        elif grep -q &quot;h2&quot; $v2ray_qr_config_file; then            modify_inbound_port        fi        start_process_systemd        ;;    7)        tls_type        ;;    8)        show_access_log        ;;    9)        show_error_log        ;;    10)        basic_information        vmess_qr_link_image        show_information        ;;    11)        bbr_boost_sh        ;;    12)        mtproxy_sh        ;;    13)        stop_process_systemd        ssl_update_manuel        start_process_systemd        ;;    14)        uninstall_all        ;;    15)        acme_cron_update        ;;    16)        delete_tls_key_and_crt        ;;    17)        exit 0        ;;    *)        echo -e &quot;${RedBG}请输入正确的数字${Font}&quot;        ;;    esac}judge_modelist &quot;$1&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 越过长城，走向世界 </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将博客从Windows转移至MacOS</title>
      <link href="/2019/11/17/%E5%B0%86%E5%8D%9A%E5%AE%A2%E4%BB%8EWindows%E8%BD%AC%E7%A7%BB%E8%87%B3MacOS/"/>
      <url>/2019/11/17/%E5%B0%86%E5%8D%9A%E5%AE%A2%E4%BB%8EWindows%E8%BD%AC%E7%A7%BB%E8%87%B3MacOS/</url>
      
        <content type="html"><![CDATA[<p>由于本人刚接触MacOS,系统使用习惯依然是Windows的那一套，还没改过来。安装Git和Node.js时没看Hexo的文档直接从官网下载安装包安装，过程也很顺利，跟Windows一样直接点下一步就安装完成了。结果到安装Hexo时，我在终端输入<code>$ npm install -g hexo-cli</code> 之后就报错：</p><pre><code class="shell">npm WARN checkPermissions Missing write access to /usr/local/lib/node_modules npm ERR! code EACCES npm ERR! syscall access npm ERR! path /usr/local/lib/node_modules npm ERR! errno -13 npm ERR! Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules&#39; npm ERR! [Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules&#39;] { npm ERR! stack: &quot;Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules&#39;&quot;, npm ERR! errno: -13, npm ERR! code: &#39;EACCES&#39;, npm ERR! syscall: &#39;access&#39;, npm ERR! path: &#39;/usr/local/lib/node_modules&#39; npm ERR! } npm ERR! npm ERR! The operation was rejected by your operating system. npm ERR! It is likely you do not have the permissions to access this file as the current user npm ERR! npm ERR! If you believe this might be a permissions issue, please double-check the npm ERR! permissions of the file and its containing directories, or try running npm ERR! the command again as root/Administrator. npm ERR! A complete log of this run can be found in: npm ERR!  /Users/xxxx/.npm/_logs/2019-11-16T04_23_38_680Z-debug.log </code></pre><p>查看Hexo的文档才知道是<code>EACCES</code>权限错误的问题，用Homebrew等包管理工具安装就不会出现这种问题，不过文档也提供了解决方法：<a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener">npmjs发布的指导</a>。指导提供了两种解决方法： </p><ul><li>使用节点版本管理器重新安装npm（推荐）</li><li>手动更改npm的默认目录<br>我选择了第二种，文档翻译如下： </li></ul><p><em>为了最大程度地减少权限错误的可能性，您可以将npm配置为使用其他目录。 在此示例中，您将在主目录中创建并使用隐藏目录。</em></p><ol><li>备份您的电脑</li><li>在命令行的主目录中，为全局安装创建目录： <code>mkdir ~/.npm-global</code> </li><li>配置npm以使用新的目录路径： <code>npm config set prefix &#39;~/.npm-global&#39;</code></li><li>在您喜欢的文本编辑器中，打开或创建<strong><em>~/.profile</em></strong>文件并添加以下行： <code>export PATH=~/.npm-global/bin:$PATH</code></li><li>在命令行上，更新系统变量：<code>source ~/.profile</code></li></ol><p>设置过后便可正常安装Hexo。<br>为了省事儿，我直接将原Windows系统博客目录下的配置文件 <code>_config.yml</code> 和主题文件夹material拷贝过来，由于本博客的外观主题 <code>Material</code> 的官方文档已经无法访问，凭记忆添加插件的时候少安装了一个插件，导致生成文章时再次报错，根据报错找到了忘记安装的 <code>hexo-helper-qrcode</code> 插件，之后便可以正常生成页面，最后添加新的ssh keys到GitHub， <code>hexo generate --deploy</code> 博客顺利完成转移。</p><p>因本博客主题作者已不再维护主题的文档，为了备忘记录一下使用到的配置：<br>Hexo插件： <code>hexo-deployer-git</code>（一键部署插件），<code>hexo-generator-feed</code>（生成feed插件），<code>hexo-generator-search</code>（本地搜索插件），<code>hexo-helper-qrcode</code>（生成文章页二维码）<br>MaterialCDN：使用又拍云存储图片和主题的静态文件。</p><p>补充：Xcode自带Git，应用商店直接安装即可，Node还是用包管理工具<a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a>安装省事儿。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精神有些低沉</title>
      <link href="/2018/10/13/%E7%B2%BE%E7%A5%9E%E6%9C%89%E4%BA%9B%E4%BD%8E%E6%B2%89/"/>
      <url>/2018/10/13/%E7%B2%BE%E7%A5%9E%E6%9C%89%E4%BA%9B%E4%BD%8E%E6%B2%89/</url>
      
        <content type="html"><![CDATA[<pre><code>在最深的绝望里，遇见最美丽的风景。    ——几米</code></pre><a id="more"></a><p>年休七天假，因為懶(qióng)癌發作哪也沒去，在家躺尸。方才樓下有一人持桿打棗，擾醒了我的白日夢，無奈我只是這裡的租戶，也不敢對其叫罵。白日夢被擾醒，坐起發了一會兒呆，自言自語道：該想想接下來的路該怎麼走了。<br>個人博客建立以後數次遷移把本就很少的博文都弄丟了，此後停更至今一年多了，微信公眾號也停更快一年了，說工作生活忙不過來無暇顧及肯定是假話，是那份初心被我丟棄了吧。越想輸出越認識到自己的無知和渺小，進而自卑，越對自我期許與看重，心情越黯淡。<br>今年我曾經的一位朋友在兩年未聯絡過我的情況下突然發訊息來說想見見我，一個月后我的這位朋友騙過所有人去了隔海的國度，說是去旅行，最後一天卻在異國跳樓自殺，我愕然，我不知如何面對。十天后我久病的爺爺在老家趁家中無他人時服農藥自殺，我默然。出殯時作為長孫我捧著爺爺的遺像，在大雨中深一腳淺一腳走在泥濘的山路上，我不得不面對我越來越害怕的現實了。<br>我時常想該對自己認真一點了，好不容易來一趟這珍貴的人世，不能枉過這悠長的一生。得過且過的日子我自己都受不了了。自我成長停滯的這兩年我身心都已倦怠，我必須讓自己再次成長，我知道會更加艱辛，我知道成長的路就是失去的路，但成長會有一段這樣艱辛的路要走，這是一條必經的路，它是泥濘的，在經過的時候，一隻脚踩下去，另一隻脚需要從泥濘中用力，用力，才能繼續走下一步……<br>碼了許多廢話，歸根結底：我要奮力前行了。</p>]]></content>
      
      
      <categories>
          
          <category> 無題 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎唸 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
